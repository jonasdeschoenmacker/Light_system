
versie_11_12_19_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d2c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001dec  08001dec  00011dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e1c  08001e1c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001e1c  08001e1c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e1c  08001e1c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e1c  08001e1c  00011e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e20  08001e20  00011e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000004  08001e28  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08001e28  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd9b  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e92  00000000  00000000  0002fdc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000af8  00000000  00000000  00031c60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a20  00000000  00000000  00032758  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000d517  00000000  00000000  00033178  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009d7a  00000000  00000000  0004068f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00046927  00000000  00000000  0004a409  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00090d30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002708  00000000  00000000  00090dac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001dd4 	.word	0x08001dd4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001dd4 	.word	0x08001dd4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_Init+0x24>)
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f001 fc75 	bl	8001b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f001 f824 	bl	800129c <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 f8ef 	bl	8000446 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 f8c3 	bl	80003fc <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000020 	.word	0x20000020

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	20000020 	.word	0x20000020

080002ac <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	0002      	movs	r2, r0
 80002b4:	1dfb      	adds	r3, r7, #7
 80002b6:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002b8:	1dfb      	adds	r3, r7, #7
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	001a      	movs	r2, r3
 80002be:	231f      	movs	r3, #31
 80002c0:	401a      	ands	r2, r3
 80002c2:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <NVIC_EnableIRQ+0x28>)
 80002c4:	2101      	movs	r1, #1
 80002c6:	4091      	lsls	r1, r2
 80002c8:	000a      	movs	r2, r1
 80002ca:	601a      	str	r2, [r3, #0]
}
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	46bd      	mov	sp, r7
 80002d0:	b002      	add	sp, #8
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	e000e100 	.word	0xe000e100

080002d8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002d8:	b590      	push	{r4, r7, lr}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	0002      	movs	r2, r0
 80002e0:	6039      	str	r1, [r7, #0]
 80002e2:	1dfb      	adds	r3, r7, #7
 80002e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80002e6:	1dfb      	adds	r3, r7, #7
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2b7f      	cmp	r3, #127	; 0x7f
 80002ec:	d932      	bls.n	8000354 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002ee:	4a2f      	ldr	r2, [pc, #188]	; (80003ac <NVIC_SetPriority+0xd4>)
 80002f0:	1dfb      	adds	r3, r7, #7
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	0019      	movs	r1, r3
 80002f6:	230f      	movs	r3, #15
 80002f8:	400b      	ands	r3, r1
 80002fa:	3b08      	subs	r3, #8
 80002fc:	089b      	lsrs	r3, r3, #2
 80002fe:	3306      	adds	r3, #6
 8000300:	009b      	lsls	r3, r3, #2
 8000302:	18d3      	adds	r3, r2, r3
 8000304:	3304      	adds	r3, #4
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	1dfa      	adds	r2, r7, #7
 800030a:	7812      	ldrb	r2, [r2, #0]
 800030c:	0011      	movs	r1, r2
 800030e:	2203      	movs	r2, #3
 8000310:	400a      	ands	r2, r1
 8000312:	00d2      	lsls	r2, r2, #3
 8000314:	21ff      	movs	r1, #255	; 0xff
 8000316:	4091      	lsls	r1, r2
 8000318:	000a      	movs	r2, r1
 800031a:	43d2      	mvns	r2, r2
 800031c:	401a      	ands	r2, r3
 800031e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000320:	683b      	ldr	r3, [r7, #0]
 8000322:	019b      	lsls	r3, r3, #6
 8000324:	22ff      	movs	r2, #255	; 0xff
 8000326:	401a      	ands	r2, r3
 8000328:	1dfb      	adds	r3, r7, #7
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	0018      	movs	r0, r3
 800032e:	2303      	movs	r3, #3
 8000330:	4003      	ands	r3, r0
 8000332:	00db      	lsls	r3, r3, #3
 8000334:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000336:	481d      	ldr	r0, [pc, #116]	; (80003ac <NVIC_SetPriority+0xd4>)
 8000338:	1dfb      	adds	r3, r7, #7
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	001c      	movs	r4, r3
 800033e:	230f      	movs	r3, #15
 8000340:	4023      	ands	r3, r4
 8000342:	3b08      	subs	r3, #8
 8000344:	089b      	lsrs	r3, r3, #2
 8000346:	430a      	orrs	r2, r1
 8000348:	3306      	adds	r3, #6
 800034a:	009b      	lsls	r3, r3, #2
 800034c:	18c3      	adds	r3, r0, r3
 800034e:	3304      	adds	r3, #4
 8000350:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000352:	e027      	b.n	80003a4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000354:	4a16      	ldr	r2, [pc, #88]	; (80003b0 <NVIC_SetPriority+0xd8>)
 8000356:	1dfb      	adds	r3, r7, #7
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	b25b      	sxtb	r3, r3
 800035c:	089b      	lsrs	r3, r3, #2
 800035e:	33c0      	adds	r3, #192	; 0xc0
 8000360:	009b      	lsls	r3, r3, #2
 8000362:	589b      	ldr	r3, [r3, r2]
 8000364:	1dfa      	adds	r2, r7, #7
 8000366:	7812      	ldrb	r2, [r2, #0]
 8000368:	0011      	movs	r1, r2
 800036a:	2203      	movs	r2, #3
 800036c:	400a      	ands	r2, r1
 800036e:	00d2      	lsls	r2, r2, #3
 8000370:	21ff      	movs	r1, #255	; 0xff
 8000372:	4091      	lsls	r1, r2
 8000374:	000a      	movs	r2, r1
 8000376:	43d2      	mvns	r2, r2
 8000378:	401a      	ands	r2, r3
 800037a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	019b      	lsls	r3, r3, #6
 8000380:	22ff      	movs	r2, #255	; 0xff
 8000382:	401a      	ands	r2, r3
 8000384:	1dfb      	adds	r3, r7, #7
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	0018      	movs	r0, r3
 800038a:	2303      	movs	r3, #3
 800038c:	4003      	ands	r3, r0
 800038e:	00db      	lsls	r3, r3, #3
 8000390:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000392:	4807      	ldr	r0, [pc, #28]	; (80003b0 <NVIC_SetPriority+0xd8>)
 8000394:	1dfb      	adds	r3, r7, #7
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	b25b      	sxtb	r3, r3
 800039a:	089b      	lsrs	r3, r3, #2
 800039c:	430a      	orrs	r2, r1
 800039e:	33c0      	adds	r3, #192	; 0xc0
 80003a0:	009b      	lsls	r3, r3, #2
 80003a2:	501a      	str	r2, [r3, r0]
}
 80003a4:	46c0      	nop			; (mov r8, r8)
 80003a6:	46bd      	mov	sp, r7
 80003a8:	b003      	add	sp, #12
 80003aa:	bd90      	pop	{r4, r7, pc}
 80003ac:	e000ed00 	.word	0xe000ed00
 80003b0:	e000e100 	.word	0xe000e100

080003b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	3b01      	subs	r3, #1
 80003c0:	4a0c      	ldr	r2, [pc, #48]	; (80003f4 <SysTick_Config+0x40>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d901      	bls.n	80003ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003c6:	2301      	movs	r3, #1
 80003c8:	e010      	b.n	80003ec <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003ca:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <SysTick_Config+0x44>)
 80003cc:	687a      	ldr	r2, [r7, #4]
 80003ce:	3a01      	subs	r2, #1
 80003d0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003d2:	2301      	movs	r3, #1
 80003d4:	425b      	negs	r3, r3
 80003d6:	2103      	movs	r1, #3
 80003d8:	0018      	movs	r0, r3
 80003da:	f7ff ff7d 	bl	80002d8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003de:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <SysTick_Config+0x44>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003e4:	4b04      	ldr	r3, [pc, #16]	; (80003f8 <SysTick_Config+0x44>)
 80003e6:	2207      	movs	r2, #7
 80003e8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003ea:	2300      	movs	r3, #0
}
 80003ec:	0018      	movs	r0, r3
 80003ee:	46bd      	mov	sp, r7
 80003f0:	b002      	add	sp, #8
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	00ffffff 	.word	0x00ffffff
 80003f8:	e000e010 	.word	0xe000e010

080003fc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	60b9      	str	r1, [r7, #8]
 8000404:	607a      	str	r2, [r7, #4]
 8000406:	210f      	movs	r1, #15
 8000408:	187b      	adds	r3, r7, r1
 800040a:	1c02      	adds	r2, r0, #0
 800040c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800040e:	68ba      	ldr	r2, [r7, #8]
 8000410:	187b      	adds	r3, r7, r1
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	b25b      	sxtb	r3, r3
 8000416:	0011      	movs	r1, r2
 8000418:	0018      	movs	r0, r3
 800041a:	f7ff ff5d 	bl	80002d8 <NVIC_SetPriority>
}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	b004      	add	sp, #16
 8000424:	bd80      	pop	{r7, pc}

08000426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000426:	b580      	push	{r7, lr}
 8000428:	b082      	sub	sp, #8
 800042a:	af00      	add	r7, sp, #0
 800042c:	0002      	movs	r2, r0
 800042e:	1dfb      	adds	r3, r7, #7
 8000430:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000432:	1dfb      	adds	r3, r7, #7
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	b25b      	sxtb	r3, r3
 8000438:	0018      	movs	r0, r3
 800043a:	f7ff ff37 	bl	80002ac <NVIC_EnableIRQ>
}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	46bd      	mov	sp, r7
 8000442:	b002      	add	sp, #8
 8000444:	bd80      	pop	{r7, pc}

08000446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000446:	b580      	push	{r7, lr}
 8000448:	b082      	sub	sp, #8
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	0018      	movs	r0, r3
 8000452:	f7ff ffaf 	bl	80003b4 <SysTick_Config>
 8000456:	0003      	movs	r3, r0
}
 8000458:	0018      	movs	r0, r3
 800045a:	46bd      	mov	sp, r7
 800045c:	b002      	add	sp, #8
 800045e:	bd80      	pop	{r7, pc}

08000460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000460:	b580      	push	{r7, lr}
 8000462:	b086      	sub	sp, #24
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800046a:	2300      	movs	r3, #0
 800046c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800046e:	2300      	movs	r3, #0
 8000470:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000472:	2300      	movs	r3, #0
 8000474:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000476:	e14f      	b.n	8000718 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2101      	movs	r1, #1
 800047e:	697a      	ldr	r2, [r7, #20]
 8000480:	4091      	lsls	r1, r2
 8000482:	000a      	movs	r2, r1
 8000484:	4013      	ands	r3, r2
 8000486:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d100      	bne.n	8000490 <HAL_GPIO_Init+0x30>
 800048e:	e140      	b.n	8000712 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	2b02      	cmp	r3, #2
 8000496:	d003      	beq.n	80004a0 <HAL_GPIO_Init+0x40>
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	2b12      	cmp	r3, #18
 800049e:	d123      	bne.n	80004e8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	08da      	lsrs	r2, r3, #3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	3208      	adds	r2, #8
 80004a8:	0092      	lsls	r2, r2, #2
 80004aa:	58d3      	ldr	r3, [r2, r3]
 80004ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	2207      	movs	r2, #7
 80004b2:	4013      	ands	r3, r2
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	220f      	movs	r2, #15
 80004b8:	409a      	lsls	r2, r3
 80004ba:	0013      	movs	r3, r2
 80004bc:	43da      	mvns	r2, r3
 80004be:	693b      	ldr	r3, [r7, #16]
 80004c0:	4013      	ands	r3, r2
 80004c2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	691a      	ldr	r2, [r3, #16]
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	2107      	movs	r1, #7
 80004cc:	400b      	ands	r3, r1
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	409a      	lsls	r2, r3
 80004d2:	0013      	movs	r3, r2
 80004d4:	693a      	ldr	r2, [r7, #16]
 80004d6:	4313      	orrs	r3, r2
 80004d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80004da:	697b      	ldr	r3, [r7, #20]
 80004dc:	08da      	lsrs	r2, r3, #3
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	3208      	adds	r2, #8
 80004e2:	0092      	lsls	r2, r2, #2
 80004e4:	6939      	ldr	r1, [r7, #16]
 80004e6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	005b      	lsls	r3, r3, #1
 80004f2:	2203      	movs	r2, #3
 80004f4:	409a      	lsls	r2, r3
 80004f6:	0013      	movs	r3, r2
 80004f8:	43da      	mvns	r2, r3
 80004fa:	693b      	ldr	r3, [r7, #16]
 80004fc:	4013      	ands	r3, r2
 80004fe:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	2203      	movs	r2, #3
 8000506:	401a      	ands	r2, r3
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	409a      	lsls	r2, r3
 800050e:	0013      	movs	r3, r2
 8000510:	693a      	ldr	r2, [r7, #16]
 8000512:	4313      	orrs	r3, r2
 8000514:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	693a      	ldr	r2, [r7, #16]
 800051a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d00b      	beq.n	800053c <HAL_GPIO_Init+0xdc>
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	2b02      	cmp	r3, #2
 800052a:	d007      	beq.n	800053c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000530:	2b11      	cmp	r3, #17
 8000532:	d003      	beq.n	800053c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	2b12      	cmp	r3, #18
 800053a:	d130      	bne.n	800059e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	2203      	movs	r2, #3
 8000548:	409a      	lsls	r2, r3
 800054a:	0013      	movs	r3, r2
 800054c:	43da      	mvns	r2, r3
 800054e:	693b      	ldr	r3, [r7, #16]
 8000550:	4013      	ands	r3, r2
 8000552:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	68da      	ldr	r2, [r3, #12]
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	409a      	lsls	r2, r3
 800055e:	0013      	movs	r3, r2
 8000560:	693a      	ldr	r2, [r7, #16]
 8000562:	4313      	orrs	r3, r2
 8000564:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	693a      	ldr	r2, [r7, #16]
 800056a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000572:	2201      	movs	r2, #1
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	409a      	lsls	r2, r3
 8000578:	0013      	movs	r3, r2
 800057a:	43da      	mvns	r2, r3
 800057c:	693b      	ldr	r3, [r7, #16]
 800057e:	4013      	ands	r3, r2
 8000580:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	091b      	lsrs	r3, r3, #4
 8000588:	2201      	movs	r2, #1
 800058a:	401a      	ands	r2, r3
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	409a      	lsls	r2, r3
 8000590:	0013      	movs	r3, r2
 8000592:	693a      	ldr	r2, [r7, #16]
 8000594:	4313      	orrs	r3, r2
 8000596:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	693a      	ldr	r2, [r7, #16]
 800059c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	68db      	ldr	r3, [r3, #12]
 80005a2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	2203      	movs	r2, #3
 80005aa:	409a      	lsls	r2, r3
 80005ac:	0013      	movs	r3, r2
 80005ae:	43da      	mvns	r2, r3
 80005b0:	693b      	ldr	r3, [r7, #16]
 80005b2:	4013      	ands	r3, r2
 80005b4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	689a      	ldr	r2, [r3, #8]
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	409a      	lsls	r2, r3
 80005c0:	0013      	movs	r3, r2
 80005c2:	693a      	ldr	r2, [r7, #16]
 80005c4:	4313      	orrs	r3, r2
 80005c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	693a      	ldr	r2, [r7, #16]
 80005cc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	685a      	ldr	r2, [r3, #4]
 80005d2:	2380      	movs	r3, #128	; 0x80
 80005d4:	055b      	lsls	r3, r3, #21
 80005d6:	4013      	ands	r3, r2
 80005d8:	d100      	bne.n	80005dc <HAL_GPIO_Init+0x17c>
 80005da:	e09a      	b.n	8000712 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005dc:	4b54      	ldr	r3, [pc, #336]	; (8000730 <HAL_GPIO_Init+0x2d0>)
 80005de:	699a      	ldr	r2, [r3, #24]
 80005e0:	4b53      	ldr	r3, [pc, #332]	; (8000730 <HAL_GPIO_Init+0x2d0>)
 80005e2:	2101      	movs	r1, #1
 80005e4:	430a      	orrs	r2, r1
 80005e6:	619a      	str	r2, [r3, #24]
 80005e8:	4b51      	ldr	r3, [pc, #324]	; (8000730 <HAL_GPIO_Init+0x2d0>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	2201      	movs	r2, #1
 80005ee:	4013      	ands	r3, r2
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 80005f4:	4a4f      	ldr	r2, [pc, #316]	; (8000734 <HAL_GPIO_Init+0x2d4>)
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	089b      	lsrs	r3, r3, #2
 80005fa:	3302      	adds	r3, #2
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	589b      	ldr	r3, [r3, r2]
 8000600:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	2203      	movs	r2, #3
 8000606:	4013      	ands	r3, r2
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	220f      	movs	r2, #15
 800060c:	409a      	lsls	r2, r3
 800060e:	0013      	movs	r3, r2
 8000610:	43da      	mvns	r2, r3
 8000612:	693b      	ldr	r3, [r7, #16]
 8000614:	4013      	ands	r3, r2
 8000616:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	2390      	movs	r3, #144	; 0x90
 800061c:	05db      	lsls	r3, r3, #23
 800061e:	429a      	cmp	r2, r3
 8000620:	d013      	beq.n	800064a <HAL_GPIO_Init+0x1ea>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a44      	ldr	r2, [pc, #272]	; (8000738 <HAL_GPIO_Init+0x2d8>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d00d      	beq.n	8000646 <HAL_GPIO_Init+0x1e6>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a43      	ldr	r2, [pc, #268]	; (800073c <HAL_GPIO_Init+0x2dc>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d007      	beq.n	8000642 <HAL_GPIO_Init+0x1e2>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a42      	ldr	r2, [pc, #264]	; (8000740 <HAL_GPIO_Init+0x2e0>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d101      	bne.n	800063e <HAL_GPIO_Init+0x1de>
 800063a:	2303      	movs	r3, #3
 800063c:	e006      	b.n	800064c <HAL_GPIO_Init+0x1ec>
 800063e:	2305      	movs	r3, #5
 8000640:	e004      	b.n	800064c <HAL_GPIO_Init+0x1ec>
 8000642:	2302      	movs	r3, #2
 8000644:	e002      	b.n	800064c <HAL_GPIO_Init+0x1ec>
 8000646:	2301      	movs	r3, #1
 8000648:	e000      	b.n	800064c <HAL_GPIO_Init+0x1ec>
 800064a:	2300      	movs	r3, #0
 800064c:	697a      	ldr	r2, [r7, #20]
 800064e:	2103      	movs	r1, #3
 8000650:	400a      	ands	r2, r1
 8000652:	0092      	lsls	r2, r2, #2
 8000654:	4093      	lsls	r3, r2
 8000656:	693a      	ldr	r2, [r7, #16]
 8000658:	4313      	orrs	r3, r2
 800065a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800065c:	4935      	ldr	r1, [pc, #212]	; (8000734 <HAL_GPIO_Init+0x2d4>)
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	089b      	lsrs	r3, r3, #2
 8000662:	3302      	adds	r3, #2
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	693a      	ldr	r2, [r7, #16]
 8000668:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800066a:	4b36      	ldr	r3, [pc, #216]	; (8000744 <HAL_GPIO_Init+0x2e4>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	43da      	mvns	r2, r3
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	4013      	ands	r3, r2
 8000678:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	685a      	ldr	r2, [r3, #4]
 800067e:	2380      	movs	r3, #128	; 0x80
 8000680:	025b      	lsls	r3, r3, #9
 8000682:	4013      	ands	r3, r2
 8000684:	d003      	beq.n	800068e <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 8000686:	693a      	ldr	r2, [r7, #16]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	4313      	orrs	r3, r2
 800068c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800068e:	4b2d      	ldr	r3, [pc, #180]	; (8000744 <HAL_GPIO_Init+0x2e4>)
 8000690:	693a      	ldr	r2, [r7, #16]
 8000692:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000694:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <HAL_GPIO_Init+0x2e4>)
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	43da      	mvns	r2, r3
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	4013      	ands	r3, r2
 80006a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	685a      	ldr	r2, [r3, #4]
 80006a8:	2380      	movs	r3, #128	; 0x80
 80006aa:	029b      	lsls	r3, r3, #10
 80006ac:	4013      	ands	r3, r2
 80006ae:	d003      	beq.n	80006b8 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 80006b0:	693a      	ldr	r2, [r7, #16]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	4313      	orrs	r3, r2
 80006b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006b8:	4b22      	ldr	r3, [pc, #136]	; (8000744 <HAL_GPIO_Init+0x2e4>)
 80006ba:	693a      	ldr	r2, [r7, #16]
 80006bc:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006be:	4b21      	ldr	r3, [pc, #132]	; (8000744 <HAL_GPIO_Init+0x2e4>)
 80006c0:	689b      	ldr	r3, [r3, #8]
 80006c2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	43da      	mvns	r2, r3
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	4013      	ands	r3, r2
 80006cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	685a      	ldr	r2, [r3, #4]
 80006d2:	2380      	movs	r3, #128	; 0x80
 80006d4:	035b      	lsls	r3, r3, #13
 80006d6:	4013      	ands	r3, r2
 80006d8:	d003      	beq.n	80006e2 <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 80006da:	693a      	ldr	r2, [r7, #16]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	4313      	orrs	r3, r2
 80006e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80006e2:	4b18      	ldr	r3, [pc, #96]	; (8000744 <HAL_GPIO_Init+0x2e4>)
 80006e4:	693a      	ldr	r2, [r7, #16]
 80006e6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80006e8:	4b16      	ldr	r3, [pc, #88]	; (8000744 <HAL_GPIO_Init+0x2e4>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	43da      	mvns	r2, r3
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	4013      	ands	r3, r2
 80006f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	685a      	ldr	r2, [r3, #4]
 80006fc:	2380      	movs	r3, #128	; 0x80
 80006fe:	039b      	lsls	r3, r3, #14
 8000700:	4013      	ands	r3, r2
 8000702:	d003      	beq.n	800070c <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 8000704:	693a      	ldr	r2, [r7, #16]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	4313      	orrs	r3, r2
 800070a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800070c:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <HAL_GPIO_Init+0x2e4>)
 800070e:	693a      	ldr	r2, [r7, #16]
 8000710:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	3301      	adds	r3, #1
 8000716:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	40da      	lsrs	r2, r3
 8000720:	1e13      	subs	r3, r2, #0
 8000722:	d000      	beq.n	8000726 <HAL_GPIO_Init+0x2c6>
 8000724:	e6a8      	b.n	8000478 <HAL_GPIO_Init+0x18>
  } 
}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	b006      	add	sp, #24
 800072c:	bd80      	pop	{r7, pc}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	40021000 	.word	0x40021000
 8000734:	40010000 	.word	0x40010000
 8000738:	48000400 	.word	0x48000400
 800073c:	48000800 	.word	0x48000800
 8000740:	48000c00 	.word	0x48000c00
 8000744:	40010400 	.word	0x40010400

08000748 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	000a      	movs	r2, r1
 8000752:	1cbb      	adds	r3, r7, #2
 8000754:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	691b      	ldr	r3, [r3, #16]
 800075a:	1cba      	adds	r2, r7, #2
 800075c:	8812      	ldrh	r2, [r2, #0]
 800075e:	4013      	ands	r3, r2
 8000760:	d004      	beq.n	800076c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000762:	230f      	movs	r3, #15
 8000764:	18fb      	adds	r3, r7, r3
 8000766:	2201      	movs	r2, #1
 8000768:	701a      	strb	r2, [r3, #0]
 800076a:	e003      	b.n	8000774 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800076c:	230f      	movs	r3, #15
 800076e:	18fb      	adds	r3, r7, r3
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000774:	230f      	movs	r3, #15
 8000776:	18fb      	adds	r3, r7, r3
 8000778:	781b      	ldrb	r3, [r3, #0]
  }
 800077a:	0018      	movs	r0, r3
 800077c:	46bd      	mov	sp, r7
 800077e:	b004      	add	sp, #16
 8000780:	bd80      	pop	{r7, pc}

08000782 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	0008      	movs	r0, r1
 800078c:	0011      	movs	r1, r2
 800078e:	1cbb      	adds	r3, r7, #2
 8000790:	1c02      	adds	r2, r0, #0
 8000792:	801a      	strh	r2, [r3, #0]
 8000794:	1c7b      	adds	r3, r7, #1
 8000796:	1c0a      	adds	r2, r1, #0
 8000798:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800079a:	1c7b      	adds	r3, r7, #1
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d004      	beq.n	80007ac <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007a2:	1cbb      	adds	r3, r7, #2
 80007a4:	881a      	ldrh	r2, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80007aa:	e003      	b.n	80007b4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007ac:	1cbb      	adds	r3, r7, #2
 80007ae:	881a      	ldrh	r2, [r3, #0]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b002      	add	sp, #8
 80007ba:	bd80      	pop	{r7, pc}

080007bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d101      	bne.n	80007ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80007ca:	2301      	movs	r3, #1
 80007cc:	e082      	b.n	80008d4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2241      	movs	r2, #65	; 0x41
 80007d2:	5c9b      	ldrb	r3, [r3, r2]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d107      	bne.n	80007ea <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2240      	movs	r2, #64	; 0x40
 80007de:	2100      	movs	r1, #0
 80007e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	0018      	movs	r0, r3
 80007e6:	f001 f9c1 	bl	8001b6c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2241      	movs	r2, #65	; 0x41
 80007ee:	2124      	movs	r1, #36	; 0x24
 80007f0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2101      	movs	r1, #1
 80007fe:	438a      	bics	r2, r1
 8000800:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	685a      	ldr	r2, [r3, #4]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4934      	ldr	r1, [pc, #208]	; (80008dc <HAL_I2C_Init+0x120>)
 800080c:	400a      	ands	r2, r1
 800080e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	689a      	ldr	r2, [r3, #8]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4931      	ldr	r1, [pc, #196]	; (80008e0 <HAL_I2C_Init+0x124>)
 800081c:	400a      	ands	r2, r1
 800081e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d108      	bne.n	800083a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	689a      	ldr	r2, [r3, #8]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	0209      	lsls	r1, r1, #8
 8000834:	430a      	orrs	r2, r1
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	e007      	b.n	800084a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	689a      	ldr	r2, [r3, #8]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2184      	movs	r1, #132	; 0x84
 8000844:	0209      	lsls	r1, r1, #8
 8000846:	430a      	orrs	r2, r1
 8000848:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	68db      	ldr	r3, [r3, #12]
 800084e:	2b02      	cmp	r3, #2
 8000850:	d104      	bne.n	800085c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2280      	movs	r2, #128	; 0x80
 8000858:	0112      	lsls	r2, r2, #4
 800085a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	685a      	ldr	r2, [r3, #4]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	491f      	ldr	r1, [pc, #124]	; (80008e4 <HAL_I2C_Init+0x128>)
 8000868:	430a      	orrs	r2, r1
 800086a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	68da      	ldr	r2, [r3, #12]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	491a      	ldr	r1, [pc, #104]	; (80008e0 <HAL_I2C_Init+0x124>)
 8000878:	400a      	ands	r2, r1
 800087a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	691a      	ldr	r2, [r3, #16]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	431a      	orrs	r2, r3
 8000886:	0011      	movs	r1, r2
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	021a      	lsls	r2, r3, #8
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	430a      	orrs	r2, r1
 8000894:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	69d9      	ldr	r1, [r3, #28]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6a1a      	ldr	r2, [r3, #32]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	430a      	orrs	r2, r1
 80008a4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2101      	movs	r1, #1
 80008b2:	430a      	orrs	r2, r1
 80008b4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2200      	movs	r2, #0
 80008ba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2241      	movs	r2, #65	; 0x41
 80008c0:	2120      	movs	r1, #32
 80008c2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2200      	movs	r2, #0
 80008c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2242      	movs	r2, #66	; 0x42
 80008ce:	2100      	movs	r1, #0
 80008d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80008d2:	2300      	movs	r3, #0
}
 80008d4:	0018      	movs	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	b002      	add	sp, #8
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	f0ffffff 	.word	0xf0ffffff
 80008e0:	ffff7fff 	.word	0xffff7fff
 80008e4:	02008000 	.word	0x02008000

080008e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2241      	movs	r2, #65	; 0x41
 80008f6:	5c9b      	ldrb	r3, [r3, r2]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	2b20      	cmp	r3, #32
 80008fc:	d138      	bne.n	8000970 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2240      	movs	r2, #64	; 0x40
 8000902:	5c9b      	ldrb	r3, [r3, r2]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d101      	bne.n	800090c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000908:	2302      	movs	r3, #2
 800090a:	e032      	b.n	8000972 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2240      	movs	r2, #64	; 0x40
 8000910:	2101      	movs	r1, #1
 8000912:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2241      	movs	r2, #65	; 0x41
 8000918:	2124      	movs	r1, #36	; 0x24
 800091a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2101      	movs	r1, #1
 8000928:	438a      	bics	r2, r1
 800092a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4911      	ldr	r1, [pc, #68]	; (800097c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8000938:	400a      	ands	r2, r1
 800093a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	6819      	ldr	r1, [r3, #0]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	683a      	ldr	r2, [r7, #0]
 8000948:	430a      	orrs	r2, r1
 800094a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2101      	movs	r1, #1
 8000958:	430a      	orrs	r2, r1
 800095a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2241      	movs	r2, #65	; 0x41
 8000960:	2120      	movs	r1, #32
 8000962:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2240      	movs	r2, #64	; 0x40
 8000968:	2100      	movs	r1, #0
 800096a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800096c:	2300      	movs	r3, #0
 800096e:	e000      	b.n	8000972 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000970:	2302      	movs	r3, #2
  }
}
 8000972:	0018      	movs	r0, r3
 8000974:	46bd      	mov	sp, r7
 8000976:	b002      	add	sp, #8
 8000978:	bd80      	pop	{r7, pc}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	ffffefff 	.word	0xffffefff

08000980 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2241      	movs	r2, #65	; 0x41
 8000992:	5c9b      	ldrb	r3, [r3, r2]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2b20      	cmp	r3, #32
 8000998:	d139      	bne.n	8000a0e <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2240      	movs	r2, #64	; 0x40
 800099e:	5c9b      	ldrb	r3, [r3, r2]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d101      	bne.n	80009a8 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 80009a4:	2302      	movs	r3, #2
 80009a6:	e033      	b.n	8000a10 <HAL_I2CEx_ConfigDigitalFilter+0x90>
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2240      	movs	r2, #64	; 0x40
 80009ac:	2101      	movs	r1, #1
 80009ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2241      	movs	r2, #65	; 0x41
 80009b4:	2124      	movs	r1, #36	; 0x24
 80009b6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2101      	movs	r1, #1
 80009c4:	438a      	bics	r2, r1
 80009c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	4a11      	ldr	r2, [pc, #68]	; (8000a18 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 80009d4:	4013      	ands	r3, r2
 80009d6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	021b      	lsls	r3, r3, #8
 80009dc:	68fa      	ldr	r2, [r7, #12]
 80009de:	4313      	orrs	r3, r2
 80009e0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	68fa      	ldr	r2, [r7, #12]
 80009e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2101      	movs	r1, #1
 80009f6:	430a      	orrs	r2, r1
 80009f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2241      	movs	r2, #65	; 0x41
 80009fe:	2120      	movs	r1, #32
 8000a00:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2240      	movs	r2, #64	; 0x40
 8000a06:	2100      	movs	r1, #0
 8000a08:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	e000      	b.n	8000a10 <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8000a0e:	2302      	movs	r3, #2
  }
}
 8000a10:	0018      	movs	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b004      	add	sp, #16
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	fffff0ff 	.word	0xfffff0ff

08000a1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	4013      	ands	r3, r2
 8000a30:	d100      	bne.n	8000a34 <HAL_RCC_OscConfig+0x18>
 8000a32:	e08d      	b.n	8000b50 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a34:	4bc3      	ldr	r3, [pc, #780]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	220c      	movs	r2, #12
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	2b04      	cmp	r3, #4
 8000a3e:	d00e      	beq.n	8000a5e <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a40:	4bc0      	ldr	r3, [pc, #768]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	220c      	movs	r2, #12
 8000a46:	4013      	ands	r3, r2
 8000a48:	2b08      	cmp	r3, #8
 8000a4a:	d116      	bne.n	8000a7a <HAL_RCC_OscConfig+0x5e>
 8000a4c:	4bbd      	ldr	r3, [pc, #756]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000a4e:	685a      	ldr	r2, [r3, #4]
 8000a50:	2380      	movs	r3, #128	; 0x80
 8000a52:	025b      	lsls	r3, r3, #9
 8000a54:	401a      	ands	r2, r3
 8000a56:	2380      	movs	r3, #128	; 0x80
 8000a58:	025b      	lsls	r3, r3, #9
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d10d      	bne.n	8000a7a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a5e:	4bb9      	ldr	r3, [pc, #740]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	2380      	movs	r3, #128	; 0x80
 8000a64:	029b      	lsls	r3, r3, #10
 8000a66:	4013      	ands	r3, r2
 8000a68:	d100      	bne.n	8000a6c <HAL_RCC_OscConfig+0x50>
 8000a6a:	e070      	b.n	8000b4e <HAL_RCC_OscConfig+0x132>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d000      	beq.n	8000a76 <HAL_RCC_OscConfig+0x5a>
 8000a74:	e06b      	b.n	8000b4e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e2b6      	b.n	8000fe8 <HAL_RCC_OscConfig+0x5cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d107      	bne.n	8000a92 <HAL_RCC_OscConfig+0x76>
 8000a82:	4bb0      	ldr	r3, [pc, #704]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4baf      	ldr	r3, [pc, #700]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000a88:	2180      	movs	r1, #128	; 0x80
 8000a8a:	0249      	lsls	r1, r1, #9
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	e02f      	b.n	8000af2 <HAL_RCC_OscConfig+0xd6>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d10c      	bne.n	8000ab4 <HAL_RCC_OscConfig+0x98>
 8000a9a:	4baa      	ldr	r3, [pc, #680]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	4ba9      	ldr	r3, [pc, #676]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000aa0:	49a9      	ldr	r1, [pc, #676]	; (8000d48 <HAL_RCC_OscConfig+0x32c>)
 8000aa2:	400a      	ands	r2, r1
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	4ba7      	ldr	r3, [pc, #668]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	4ba6      	ldr	r3, [pc, #664]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000aac:	49a7      	ldr	r1, [pc, #668]	; (8000d4c <HAL_RCC_OscConfig+0x330>)
 8000aae:	400a      	ands	r2, r1
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	e01e      	b.n	8000af2 <HAL_RCC_OscConfig+0xd6>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	2b05      	cmp	r3, #5
 8000aba:	d10e      	bne.n	8000ada <HAL_RCC_OscConfig+0xbe>
 8000abc:	4ba1      	ldr	r3, [pc, #644]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4ba0      	ldr	r3, [pc, #640]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000ac2:	2180      	movs	r1, #128	; 0x80
 8000ac4:	02c9      	lsls	r1, r1, #11
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	4b9e      	ldr	r3, [pc, #632]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4b9d      	ldr	r3, [pc, #628]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000ad0:	2180      	movs	r1, #128	; 0x80
 8000ad2:	0249      	lsls	r1, r1, #9
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	e00b      	b.n	8000af2 <HAL_RCC_OscConfig+0xd6>
 8000ada:	4b9a      	ldr	r3, [pc, #616]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	4b99      	ldr	r3, [pc, #612]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000ae0:	4999      	ldr	r1, [pc, #612]	; (8000d48 <HAL_RCC_OscConfig+0x32c>)
 8000ae2:	400a      	ands	r2, r1
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	4b97      	ldr	r3, [pc, #604]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	4b96      	ldr	r3, [pc, #600]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000aec:	4997      	ldr	r1, [pc, #604]	; (8000d4c <HAL_RCC_OscConfig+0x330>)
 8000aee:	400a      	ands	r2, r1
 8000af0:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d014      	beq.n	8000b24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000afa:	f7ff fbcd 	bl	8000298 <HAL_GetTick>
 8000afe:	0003      	movs	r3, r0
 8000b00:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b02:	e008      	b.n	8000b16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b04:	f7ff fbc8 	bl	8000298 <HAL_GetTick>
 8000b08:	0002      	movs	r2, r0
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	2b64      	cmp	r3, #100	; 0x64
 8000b10:	d901      	bls.n	8000b16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000b12:	2303      	movs	r3, #3
 8000b14:	e268      	b.n	8000fe8 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b16:	4b8b      	ldr	r3, [pc, #556]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	2380      	movs	r3, #128	; 0x80
 8000b1c:	029b      	lsls	r3, r3, #10
 8000b1e:	4013      	ands	r3, r2
 8000b20:	d0f0      	beq.n	8000b04 <HAL_RCC_OscConfig+0xe8>
 8000b22:	e015      	b.n	8000b50 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b24:	f7ff fbb8 	bl	8000298 <HAL_GetTick>
 8000b28:	0003      	movs	r3, r0
 8000b2a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b2c:	e008      	b.n	8000b40 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b2e:	f7ff fbb3 	bl	8000298 <HAL_GetTick>
 8000b32:	0002      	movs	r2, r0
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	1ad3      	subs	r3, r2, r3
 8000b38:	2b64      	cmp	r3, #100	; 0x64
 8000b3a:	d901      	bls.n	8000b40 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	e253      	b.n	8000fe8 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b40:	4b80      	ldr	r3, [pc, #512]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	2380      	movs	r3, #128	; 0x80
 8000b46:	029b      	lsls	r3, r3, #10
 8000b48:	4013      	ands	r3, r2
 8000b4a:	d1f0      	bne.n	8000b2e <HAL_RCC_OscConfig+0x112>
 8000b4c:	e000      	b.n	8000b50 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b4e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2202      	movs	r2, #2
 8000b56:	4013      	ands	r3, r2
 8000b58:	d100      	bne.n	8000b5c <HAL_RCC_OscConfig+0x140>
 8000b5a:	e069      	b.n	8000c30 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b5c:	4b79      	ldr	r3, [pc, #484]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	220c      	movs	r2, #12
 8000b62:	4013      	ands	r3, r2
 8000b64:	d00b      	beq.n	8000b7e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b66:	4b77      	ldr	r3, [pc, #476]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	2b08      	cmp	r3, #8
 8000b70:	d11c      	bne.n	8000bac <HAL_RCC_OscConfig+0x190>
 8000b72:	4b74      	ldr	r3, [pc, #464]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	2380      	movs	r3, #128	; 0x80
 8000b78:	025b      	lsls	r3, r3, #9
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	d116      	bne.n	8000bac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b7e:	4b71      	ldr	r3, [pc, #452]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2202      	movs	r2, #2
 8000b84:	4013      	ands	r3, r2
 8000b86:	d005      	beq.n	8000b94 <HAL_RCC_OscConfig+0x178>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d001      	beq.n	8000b94 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	e229      	b.n	8000fe8 <HAL_RCC_OscConfig+0x5cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b94:	4b6b      	ldr	r3, [pc, #428]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	22f8      	movs	r2, #248	; 0xf8
 8000b9a:	4393      	bics	r3, r2
 8000b9c:	0019      	movs	r1, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	691b      	ldr	r3, [r3, #16]
 8000ba2:	00da      	lsls	r2, r3, #3
 8000ba4:	4b67      	ldr	r3, [pc, #412]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000baa:	e041      	b.n	8000c30 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d024      	beq.n	8000bfe <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bb4:	4b63      	ldr	r3, [pc, #396]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b62      	ldr	r3, [pc, #392]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000bba:	2101      	movs	r1, #1
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bc0:	f7ff fb6a 	bl	8000298 <HAL_GetTick>
 8000bc4:	0003      	movs	r3, r0
 8000bc6:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bc8:	e008      	b.n	8000bdc <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bca:	f7ff fb65 	bl	8000298 <HAL_GetTick>
 8000bce:	0002      	movs	r2, r0
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	1ad3      	subs	r3, r2, r3
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d901      	bls.n	8000bdc <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	e205      	b.n	8000fe8 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bdc:	4b59      	ldr	r3, [pc, #356]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2202      	movs	r2, #2
 8000be2:	4013      	ands	r3, r2
 8000be4:	d0f1      	beq.n	8000bca <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000be6:	4b57      	ldr	r3, [pc, #348]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	22f8      	movs	r2, #248	; 0xf8
 8000bec:	4393      	bics	r3, r2
 8000bee:	0019      	movs	r1, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	691b      	ldr	r3, [r3, #16]
 8000bf4:	00da      	lsls	r2, r3, #3
 8000bf6:	4b53      	ldr	r3, [pc, #332]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	e018      	b.n	8000c30 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bfe:	4b51      	ldr	r3, [pc, #324]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	4b50      	ldr	r3, [pc, #320]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000c04:	2101      	movs	r1, #1
 8000c06:	438a      	bics	r2, r1
 8000c08:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c0a:	f7ff fb45 	bl	8000298 <HAL_GetTick>
 8000c0e:	0003      	movs	r3, r0
 8000c10:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c12:	e008      	b.n	8000c26 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c14:	f7ff fb40 	bl	8000298 <HAL_GetTick>
 8000c18:	0002      	movs	r2, r0
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d901      	bls.n	8000c26 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8000c22:	2303      	movs	r3, #3
 8000c24:	e1e0      	b.n	8000fe8 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c26:	4b47      	ldr	r3, [pc, #284]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2202      	movs	r2, #2
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	d1f1      	bne.n	8000c14 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2208      	movs	r2, #8
 8000c36:	4013      	ands	r3, r2
 8000c38:	d036      	beq.n	8000ca8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d019      	beq.n	8000c76 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c42:	4b40      	ldr	r3, [pc, #256]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000c44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c46:	4b3f      	ldr	r3, [pc, #252]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000c48:	2101      	movs	r1, #1
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c4e:	f7ff fb23 	bl	8000298 <HAL_GetTick>
 8000c52:	0003      	movs	r3, r0
 8000c54:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c56:	e008      	b.n	8000c6a <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c58:	f7ff fb1e 	bl	8000298 <HAL_GetTick>
 8000c5c:	0002      	movs	r2, r0
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d901      	bls.n	8000c6a <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 8000c66:	2303      	movs	r3, #3
 8000c68:	e1be      	b.n	8000fe8 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c6a:	4b36      	ldr	r3, [pc, #216]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c6e:	2202      	movs	r2, #2
 8000c70:	4013      	ands	r3, r2
 8000c72:	d0f1      	beq.n	8000c58 <HAL_RCC_OscConfig+0x23c>
 8000c74:	e018      	b.n	8000ca8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c76:	4b33      	ldr	r3, [pc, #204]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000c78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c7a:	4b32      	ldr	r3, [pc, #200]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	438a      	bics	r2, r1
 8000c80:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c82:	f7ff fb09 	bl	8000298 <HAL_GetTick>
 8000c86:	0003      	movs	r3, r0
 8000c88:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c8a:	e008      	b.n	8000c9e <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c8c:	f7ff fb04 	bl	8000298 <HAL_GetTick>
 8000c90:	0002      	movs	r2, r0
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d901      	bls.n	8000c9e <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	e1a4      	b.n	8000fe8 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c9e:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	d1f1      	bne.n	8000c8c <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2204      	movs	r2, #4
 8000cae:	4013      	ands	r3, r2
 8000cb0:	d100      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x298>
 8000cb2:	e0b5      	b.n	8000e20 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000cb4:	2317      	movs	r3, #23
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cbc:	4b21      	ldr	r3, [pc, #132]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000cbe:	69da      	ldr	r2, [r3, #28]
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	055b      	lsls	r3, r3, #21
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	d111      	bne.n	8000cec <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cc8:	4b1e      	ldr	r3, [pc, #120]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000cca:	69da      	ldr	r2, [r3, #28]
 8000ccc:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000cce:	2180      	movs	r1, #128	; 0x80
 8000cd0:	0549      	lsls	r1, r1, #21
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	61da      	str	r2, [r3, #28]
 8000cd6:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000cd8:	69da      	ldr	r2, [r3, #28]
 8000cda:	2380      	movs	r3, #128	; 0x80
 8000cdc:	055b      	lsls	r3, r3, #21
 8000cde:	4013      	ands	r3, r2
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ce4:	2317      	movs	r3, #23
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	2201      	movs	r2, #1
 8000cea:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cec:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <HAL_RCC_OscConfig+0x334>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	d11a      	bne.n	8000d2e <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cf8:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_RCC_OscConfig+0x334>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <HAL_RCC_OscConfig+0x334>)
 8000cfe:	2180      	movs	r1, #128	; 0x80
 8000d00:	0049      	lsls	r1, r1, #1
 8000d02:	430a      	orrs	r2, r1
 8000d04:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d06:	f7ff fac7 	bl	8000298 <HAL_GetTick>
 8000d0a:	0003      	movs	r3, r0
 8000d0c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d0e:	e008      	b.n	8000d22 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d10:	f7ff fac2 	bl	8000298 <HAL_GetTick>
 8000d14:	0002      	movs	r2, r0
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b64      	cmp	r3, #100	; 0x64
 8000d1c:	d901      	bls.n	8000d22 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e162      	b.n	8000fe8 <HAL_RCC_OscConfig+0x5cc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <HAL_RCC_OscConfig+0x334>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	d0f0      	beq.n	8000d10 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d10e      	bne.n	8000d54 <HAL_RCC_OscConfig+0x338>
 8000d36:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000d38:	6a1a      	ldr	r2, [r3, #32]
 8000d3a:	4b02      	ldr	r3, [pc, #8]	; (8000d44 <HAL_RCC_OscConfig+0x328>)
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	430a      	orrs	r2, r1
 8000d40:	621a      	str	r2, [r3, #32]
 8000d42:	e035      	b.n	8000db0 <HAL_RCC_OscConfig+0x394>
 8000d44:	40021000 	.word	0x40021000
 8000d48:	fffeffff 	.word	0xfffeffff
 8000d4c:	fffbffff 	.word	0xfffbffff
 8000d50:	40007000 	.word	0x40007000
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d10c      	bne.n	8000d76 <HAL_RCC_OscConfig+0x35a>
 8000d5c:	4ba4      	ldr	r3, [pc, #656]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000d5e:	6a1a      	ldr	r2, [r3, #32]
 8000d60:	4ba3      	ldr	r3, [pc, #652]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000d62:	2101      	movs	r1, #1
 8000d64:	438a      	bics	r2, r1
 8000d66:	621a      	str	r2, [r3, #32]
 8000d68:	4ba1      	ldr	r3, [pc, #644]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000d6a:	6a1a      	ldr	r2, [r3, #32]
 8000d6c:	4ba0      	ldr	r3, [pc, #640]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000d6e:	2104      	movs	r1, #4
 8000d70:	438a      	bics	r2, r1
 8000d72:	621a      	str	r2, [r3, #32]
 8000d74:	e01c      	b.n	8000db0 <HAL_RCC_OscConfig+0x394>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	2b05      	cmp	r3, #5
 8000d7c:	d10c      	bne.n	8000d98 <HAL_RCC_OscConfig+0x37c>
 8000d7e:	4b9c      	ldr	r3, [pc, #624]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000d80:	6a1a      	ldr	r2, [r3, #32]
 8000d82:	4b9b      	ldr	r3, [pc, #620]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000d84:	2104      	movs	r1, #4
 8000d86:	430a      	orrs	r2, r1
 8000d88:	621a      	str	r2, [r3, #32]
 8000d8a:	4b99      	ldr	r3, [pc, #612]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000d8c:	6a1a      	ldr	r2, [r3, #32]
 8000d8e:	4b98      	ldr	r3, [pc, #608]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000d90:	2101      	movs	r1, #1
 8000d92:	430a      	orrs	r2, r1
 8000d94:	621a      	str	r2, [r3, #32]
 8000d96:	e00b      	b.n	8000db0 <HAL_RCC_OscConfig+0x394>
 8000d98:	4b95      	ldr	r3, [pc, #596]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000d9a:	6a1a      	ldr	r2, [r3, #32]
 8000d9c:	4b94      	ldr	r3, [pc, #592]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000d9e:	2101      	movs	r1, #1
 8000da0:	438a      	bics	r2, r1
 8000da2:	621a      	str	r2, [r3, #32]
 8000da4:	4b92      	ldr	r3, [pc, #584]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000da6:	6a1a      	ldr	r2, [r3, #32]
 8000da8:	4b91      	ldr	r3, [pc, #580]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000daa:	2104      	movs	r1, #4
 8000dac:	438a      	bics	r2, r1
 8000dae:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d014      	beq.n	8000de2 <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000db8:	f7ff fa6e 	bl	8000298 <HAL_GetTick>
 8000dbc:	0003      	movs	r3, r0
 8000dbe:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dc0:	e009      	b.n	8000dd6 <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dc2:	f7ff fa69 	bl	8000298 <HAL_GetTick>
 8000dc6:	0002      	movs	r2, r0
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	4a89      	ldr	r2, [pc, #548]	; (8000ff4 <HAL_RCC_OscConfig+0x5d8>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d901      	bls.n	8000dd6 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e108      	b.n	8000fe8 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dd6:	4b86      	ldr	r3, [pc, #536]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000dd8:	6a1b      	ldr	r3, [r3, #32]
 8000dda:	2202      	movs	r2, #2
 8000ddc:	4013      	ands	r3, r2
 8000dde:	d0f0      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x3a6>
 8000de0:	e013      	b.n	8000e0a <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000de2:	f7ff fa59 	bl	8000298 <HAL_GetTick>
 8000de6:	0003      	movs	r3, r0
 8000de8:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dea:	e009      	b.n	8000e00 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dec:	f7ff fa54 	bl	8000298 <HAL_GetTick>
 8000df0:	0002      	movs	r2, r0
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	4a7f      	ldr	r2, [pc, #508]	; (8000ff4 <HAL_RCC_OscConfig+0x5d8>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d901      	bls.n	8000e00 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	e0f3      	b.n	8000fe8 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e00:	4b7b      	ldr	r3, [pc, #492]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000e02:	6a1b      	ldr	r3, [r3, #32]
 8000e04:	2202      	movs	r2, #2
 8000e06:	4013      	ands	r3, r2
 8000e08:	d1f0      	bne.n	8000dec <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e0a:	2317      	movs	r3, #23
 8000e0c:	18fb      	adds	r3, r7, r3
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d105      	bne.n	8000e20 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e14:	4b76      	ldr	r3, [pc, #472]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000e16:	69da      	ldr	r2, [r3, #28]
 8000e18:	4b75      	ldr	r3, [pc, #468]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000e1a:	4977      	ldr	r1, [pc, #476]	; (8000ff8 <HAL_RCC_OscConfig+0x5dc>)
 8000e1c:	400a      	ands	r2, r1
 8000e1e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2210      	movs	r2, #16
 8000e26:	4013      	ands	r3, r2
 8000e28:	d063      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d12a      	bne.n	8000e88 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e32:	4b6f      	ldr	r3, [pc, #444]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000e34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e36:	4b6e      	ldr	r3, [pc, #440]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000e38:	2104      	movs	r1, #4
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000e3e:	4b6c      	ldr	r3, [pc, #432]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000e40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e42:	4b6b      	ldr	r3, [pc, #428]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000e44:	2101      	movs	r1, #1
 8000e46:	430a      	orrs	r2, r1
 8000e48:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e4a:	f7ff fa25 	bl	8000298 <HAL_GetTick>
 8000e4e:	0003      	movs	r3, r0
 8000e50:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000e52:	e008      	b.n	8000e66 <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000e54:	f7ff fa20 	bl	8000298 <HAL_GetTick>
 8000e58:	0002      	movs	r2, r0
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e0c0      	b.n	8000fe8 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000e66:	4b62      	ldr	r3, [pc, #392]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	d0f1      	beq.n	8000e54 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000e70:	4b5f      	ldr	r3, [pc, #380]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e74:	22f8      	movs	r2, #248	; 0xf8
 8000e76:	4393      	bics	r3, r2
 8000e78:	0019      	movs	r1, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	00da      	lsls	r2, r3, #3
 8000e80:	4b5b      	ldr	r3, [pc, #364]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000e82:	430a      	orrs	r2, r1
 8000e84:	635a      	str	r2, [r3, #52]	; 0x34
 8000e86:	e034      	b.n	8000ef2 <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	695b      	ldr	r3, [r3, #20]
 8000e8c:	3305      	adds	r3, #5
 8000e8e:	d111      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000e90:	4b57      	ldr	r3, [pc, #348]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e94:	4b56      	ldr	r3, [pc, #344]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000e96:	2104      	movs	r1, #4
 8000e98:	438a      	bics	r2, r1
 8000e9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000e9c:	4b54      	ldr	r3, [pc, #336]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ea0:	22f8      	movs	r2, #248	; 0xf8
 8000ea2:	4393      	bics	r3, r2
 8000ea4:	0019      	movs	r1, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	00da      	lsls	r2, r3, #3
 8000eac:	4b50      	ldr	r3, [pc, #320]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	635a      	str	r2, [r3, #52]	; 0x34
 8000eb2:	e01e      	b.n	8000ef2 <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000eb4:	4b4e      	ldr	r3, [pc, #312]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eb8:	4b4d      	ldr	r3, [pc, #308]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000eba:	2104      	movs	r1, #4
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000ec0:	4b4b      	ldr	r3, [pc, #300]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ec4:	4b4a      	ldr	r3, [pc, #296]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	438a      	bics	r2, r1
 8000eca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ecc:	f7ff f9e4 	bl	8000298 <HAL_GetTick>
 8000ed0:	0003      	movs	r3, r0
 8000ed2:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000ed4:	e008      	b.n	8000ee8 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ed6:	f7ff f9df 	bl	8000298 <HAL_GetTick>
 8000eda:	0002      	movs	r2, r0
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d901      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e07f      	b.n	8000fe8 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000ee8:	4b41      	ldr	r3, [pc, #260]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eec:	2202      	movs	r2, #2
 8000eee:	4013      	ands	r3, r2
 8000ef0:	d1f1      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6a1b      	ldr	r3, [r3, #32]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d100      	bne.n	8000efc <HAL_RCC_OscConfig+0x4e0>
 8000efa:	e074      	b.n	8000fe6 <HAL_RCC_OscConfig+0x5ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000efc:	4b3c      	ldr	r3, [pc, #240]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	220c      	movs	r2, #12
 8000f02:	4013      	ands	r3, r2
 8000f04:	2b08      	cmp	r3, #8
 8000f06:	d100      	bne.n	8000f0a <HAL_RCC_OscConfig+0x4ee>
 8000f08:	e06b      	b.n	8000fe2 <HAL_RCC_OscConfig+0x5c6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6a1b      	ldr	r3, [r3, #32]
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d14c      	bne.n	8000fac <HAL_RCC_OscConfig+0x590>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f12:	4b37      	ldr	r3, [pc, #220]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	4b36      	ldr	r3, [pc, #216]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000f18:	4938      	ldr	r1, [pc, #224]	; (8000ffc <HAL_RCC_OscConfig+0x5e0>)
 8000f1a:	400a      	ands	r2, r1
 8000f1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f1e:	f7ff f9bb 	bl	8000298 <HAL_GetTick>
 8000f22:	0003      	movs	r3, r0
 8000f24:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f26:	e008      	b.n	8000f3a <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f28:	f7ff f9b6 	bl	8000298 <HAL_GetTick>
 8000f2c:	0002      	movs	r2, r0
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d901      	bls.n	8000f3a <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e056      	b.n	8000fe8 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f3a:	4b2d      	ldr	r3, [pc, #180]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	2380      	movs	r3, #128	; 0x80
 8000f40:	049b      	lsls	r3, r3, #18
 8000f42:	4013      	ands	r3, r2
 8000f44:	d1f0      	bne.n	8000f28 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f46:	4b2a      	ldr	r3, [pc, #168]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4a:	220f      	movs	r2, #15
 8000f4c:	4393      	bics	r3, r2
 8000f4e:	0019      	movs	r1, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f54:	4b26      	ldr	r3, [pc, #152]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000f56:	430a      	orrs	r2, r1
 8000f58:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f5a:	4b25      	ldr	r3, [pc, #148]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	4a28      	ldr	r2, [pc, #160]	; (8001000 <HAL_RCC_OscConfig+0x5e4>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	0019      	movs	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	4b20      	ldr	r3, [pc, #128]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000f70:	430a      	orrs	r2, r1
 8000f72:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f74:	4b1e      	ldr	r3, [pc, #120]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000f7a:	2180      	movs	r1, #128	; 0x80
 8000f7c:	0449      	lsls	r1, r1, #17
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f82:	f7ff f989 	bl	8000298 <HAL_GetTick>
 8000f86:	0003      	movs	r3, r0
 8000f88:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f8a:	e008      	b.n	8000f9e <HAL_RCC_OscConfig+0x582>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f8c:	f7ff f984 	bl	8000298 <HAL_GetTick>
 8000f90:	0002      	movs	r2, r0
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d901      	bls.n	8000f9e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e024      	b.n	8000fe8 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f9e:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	2380      	movs	r3, #128	; 0x80
 8000fa4:	049b      	lsls	r3, r3, #18
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	d0f0      	beq.n	8000f8c <HAL_RCC_OscConfig+0x570>
 8000faa:	e01c      	b.n	8000fe6 <HAL_RCC_OscConfig+0x5ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fac:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000fb2:	4912      	ldr	r1, [pc, #72]	; (8000ffc <HAL_RCC_OscConfig+0x5e0>)
 8000fb4:	400a      	ands	r2, r1
 8000fb6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb8:	f7ff f96e 	bl	8000298 <HAL_GetTick>
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc0:	e008      	b.n	8000fd4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fc2:	f7ff f969 	bl	8000298 <HAL_GetTick>
 8000fc6:	0002      	movs	r2, r0
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e009      	b.n	8000fe8 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_RCC_OscConfig+0x5d4>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	2380      	movs	r3, #128	; 0x80
 8000fda:	049b      	lsls	r3, r3, #18
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d1f0      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x5a6>
 8000fe0:	e001      	b.n	8000fe6 <HAL_RCC_OscConfig+0x5ca>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e000      	b.n	8000fe8 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	0018      	movs	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b006      	add	sp, #24
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	00001388 	.word	0x00001388
 8000ff8:	efffffff 	.word	0xefffffff
 8000ffc:	feffffff 	.word	0xfeffffff
 8001000:	ffc2ffff 	.word	0xffc2ffff

08001004 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001012:	4b6a      	ldr	r3, [pc, #424]	; (80011bc <HAL_RCC_ClockConfig+0x1b8>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2201      	movs	r2, #1
 8001018:	4013      	ands	r3, r2
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	429a      	cmp	r2, r3
 800101e:	d911      	bls.n	8001044 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001020:	4b66      	ldr	r3, [pc, #408]	; (80011bc <HAL_RCC_ClockConfig+0x1b8>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2201      	movs	r2, #1
 8001026:	4393      	bics	r3, r2
 8001028:	0019      	movs	r1, r3
 800102a:	4b64      	ldr	r3, [pc, #400]	; (80011bc <HAL_RCC_ClockConfig+0x1b8>)
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	430a      	orrs	r2, r1
 8001030:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001032:	4b62      	ldr	r3, [pc, #392]	; (80011bc <HAL_RCC_ClockConfig+0x1b8>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2201      	movs	r2, #1
 8001038:	4013      	ands	r3, r2
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	429a      	cmp	r2, r3
 800103e:	d001      	beq.n	8001044 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e0b6      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2202      	movs	r2, #2
 800104a:	4013      	ands	r3, r2
 800104c:	d009      	beq.n	8001062 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800104e:	4b5c      	ldr	r3, [pc, #368]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	22f0      	movs	r2, #240	; 0xf0
 8001054:	4393      	bics	r3, r2
 8001056:	0019      	movs	r1, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	4b58      	ldr	r3, [pc, #352]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 800105e:	430a      	orrs	r2, r1
 8001060:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2201      	movs	r2, #1
 8001068:	4013      	ands	r3, r2
 800106a:	d100      	bne.n	800106e <HAL_RCC_ClockConfig+0x6a>
 800106c:	e067      	b.n	800113e <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d107      	bne.n	8001086 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001076:	4b52      	ldr	r3, [pc, #328]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	2380      	movs	r3, #128	; 0x80
 800107c:	029b      	lsls	r3, r3, #10
 800107e:	4013      	ands	r3, r2
 8001080:	d114      	bne.n	80010ac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e095      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b02      	cmp	r3, #2
 800108c:	d107      	bne.n	800109e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800108e:	4b4c      	ldr	r3, [pc, #304]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	2380      	movs	r3, #128	; 0x80
 8001094:	049b      	lsls	r3, r3, #18
 8001096:	4013      	ands	r3, r2
 8001098:	d108      	bne.n	80010ac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e089      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1ae>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800109e:	4b48      	ldr	r3, [pc, #288]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2202      	movs	r2, #2
 80010a4:	4013      	ands	r3, r2
 80010a6:	d101      	bne.n	80010ac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e082      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010ac:	4b44      	ldr	r3, [pc, #272]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2203      	movs	r2, #3
 80010b2:	4393      	bics	r3, r2
 80010b4:	0019      	movs	r1, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	4b41      	ldr	r3, [pc, #260]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 80010bc:	430a      	orrs	r2, r1
 80010be:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010c0:	f7ff f8ea 	bl	8000298 <HAL_GetTick>
 80010c4:	0003      	movs	r3, r0
 80010c6:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d111      	bne.n	80010f4 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80010d0:	e009      	b.n	80010e6 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010d2:	f7ff f8e1 	bl	8000298 <HAL_GetTick>
 80010d6:	0002      	movs	r2, r0
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	4a39      	ldr	r2, [pc, #228]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e065      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80010e6:	4b36      	ldr	r3, [pc, #216]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	220c      	movs	r2, #12
 80010ec:	4013      	ands	r3, r2
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	d1ef      	bne.n	80010d2 <HAL_RCC_ClockConfig+0xce>
 80010f2:	e024      	b.n	800113e <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d11b      	bne.n	8001134 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010fc:	e009      	b.n	8001112 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010fe:	f7ff f8cb 	bl	8000298 <HAL_GetTick>
 8001102:	0002      	movs	r2, r0
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	4a2e      	ldr	r2, [pc, #184]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d901      	bls.n	8001112 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e04f      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001112:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	220c      	movs	r2, #12
 8001118:	4013      	ands	r3, r2
 800111a:	2b08      	cmp	r3, #8
 800111c:	d1ef      	bne.n	80010fe <HAL_RCC_ClockConfig+0xfa>
 800111e:	e00e      	b.n	800113e <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001120:	f7ff f8ba 	bl	8000298 <HAL_GetTick>
 8001124:	0002      	movs	r2, r0
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	4a26      	ldr	r2, [pc, #152]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e03e      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001134:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	220c      	movs	r2, #12
 800113a:	4013      	ands	r3, r2
 800113c:	d1f0      	bne.n	8001120 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800113e:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <HAL_RCC_ClockConfig+0x1b8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2201      	movs	r2, #1
 8001144:	4013      	ands	r3, r2
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	429a      	cmp	r2, r3
 800114a:	d211      	bcs.n	8001170 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <HAL_RCC_ClockConfig+0x1b8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2201      	movs	r2, #1
 8001152:	4393      	bics	r3, r2
 8001154:	0019      	movs	r1, r3
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <HAL_RCC_ClockConfig+0x1b8>)
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	430a      	orrs	r2, r1
 800115c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <HAL_RCC_ClockConfig+0x1b8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2201      	movs	r2, #1
 8001164:	4013      	ands	r3, r2
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	429a      	cmp	r2, r3
 800116a:	d001      	beq.n	8001170 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e020      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2204      	movs	r2, #4
 8001176:	4013      	ands	r3, r2
 8001178:	d009      	beq.n	800118e <HAL_RCC_ClockConfig+0x18a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001180:	4013      	ands	r3, r2
 8001182:	0019      	movs	r1, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68da      	ldr	r2, [r3, #12]
 8001188:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 800118a:	430a      	orrs	r2, r1
 800118c:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800118e:	f000 f821 	bl	80011d4 <HAL_RCC_GetSysClockFreq>
 8001192:	0001      	movs	r1, r0
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	091b      	lsrs	r3, r3, #4
 800119a:	220f      	movs	r2, #15
 800119c:	4013      	ands	r3, r2
 800119e:	4a0b      	ldr	r2, [pc, #44]	; (80011cc <HAL_RCC_ClockConfig+0x1c8>)
 80011a0:	5cd3      	ldrb	r3, [r2, r3]
 80011a2:	000a      	movs	r2, r1
 80011a4:	40da      	lsrs	r2, r3
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <HAL_RCC_ClockConfig+0x1cc>)
 80011a8:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80011aa:	2000      	movs	r0, #0
 80011ac:	f7ff f84c 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	0018      	movs	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b004      	add	sp, #16
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	40022000 	.word	0x40022000
 80011c0:	40021000 	.word	0x40021000
 80011c4:	00001388 	.word	0x00001388
 80011c8:	fffff8ff 	.word	0xfffff8ff
 80011cc:	08001e0c 	.word	0x08001e0c
 80011d0:	20000000 	.word	0x20000000

080011d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011d4:	b590      	push	{r4, r7, lr}
 80011d6:	b08f      	sub	sp, #60	; 0x3c
 80011d8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80011da:	2314      	movs	r3, #20
 80011dc:	18fb      	adds	r3, r7, r3
 80011de:	4a2b      	ldr	r2, [pc, #172]	; (800128c <HAL_RCC_GetSysClockFreq+0xb8>)
 80011e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80011e2:	c313      	stmia	r3!, {r0, r1, r4}
 80011e4:	6812      	ldr	r2, [r2, #0]
 80011e6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	4a29      	ldr	r2, [pc, #164]	; (8001290 <HAL_RCC_GetSysClockFreq+0xbc>)
 80011ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80011ee:	c313      	stmia	r3!, {r0, r1, r4}
 80011f0:	6812      	ldr	r2, [r2, #0]
 80011f2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011f8:	2300      	movs	r3, #0
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80011fc:	2300      	movs	r3, #0
 80011fe:	637b      	str	r3, [r7, #52]	; 0x34
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001204:	2300      	movs	r3, #0
 8001206:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001208:	4b22      	ldr	r3, [pc, #136]	; (8001294 <HAL_RCC_GetSysClockFreq+0xc0>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800120e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001210:	220c      	movs	r2, #12
 8001212:	4013      	ands	r3, r2
 8001214:	2b04      	cmp	r3, #4
 8001216:	d002      	beq.n	800121e <HAL_RCC_GetSysClockFreq+0x4a>
 8001218:	2b08      	cmp	r3, #8
 800121a:	d003      	beq.n	8001224 <HAL_RCC_GetSysClockFreq+0x50>
 800121c:	e02d      	b.n	800127a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800121e:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001220:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001222:	e02d      	b.n	8001280 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001226:	0c9b      	lsrs	r3, r3, #18
 8001228:	220f      	movs	r2, #15
 800122a:	4013      	ands	r3, r2
 800122c:	2214      	movs	r2, #20
 800122e:	18ba      	adds	r2, r7, r2
 8001230:	5cd3      	ldrb	r3, [r2, r3]
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001238:	220f      	movs	r2, #15
 800123a:	4013      	ands	r3, r2
 800123c:	1d3a      	adds	r2, r7, #4
 800123e:	5cd3      	ldrb	r3, [r2, r3]
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	025b      	lsls	r3, r3, #9
 8001248:	4013      	ands	r3, r2
 800124a:	d009      	beq.n	8001260 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800124c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800124e:	4812      	ldr	r0, [pc, #72]	; (8001298 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001250:	f7fe ff5a 	bl	8000108 <__udivsi3>
 8001254:	0003      	movs	r3, r0
 8001256:	001a      	movs	r2, r3
 8001258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125a:	4353      	muls	r3, r2
 800125c:	637b      	str	r3, [r7, #52]	; 0x34
 800125e:	e009      	b.n	8001274 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001260:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001262:	000a      	movs	r2, r1
 8001264:	0152      	lsls	r2, r2, #5
 8001266:	1a52      	subs	r2, r2, r1
 8001268:	0193      	lsls	r3, r2, #6
 800126a:	1a9b      	subs	r3, r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	185b      	adds	r3, r3, r1
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001276:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001278:	e002      	b.n	8001280 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800127a:	4b07      	ldr	r3, [pc, #28]	; (8001298 <HAL_RCC_GetSysClockFreq+0xc4>)
 800127c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800127e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001282:	0018      	movs	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	b00f      	add	sp, #60	; 0x3c
 8001288:	bd90      	pop	{r4, r7, pc}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	08001dec 	.word	0x08001dec
 8001290:	08001dfc 	.word	0x08001dfc
 8001294:	40021000 	.word	0x40021000
 8001298:	007a1200 	.word	0x007a1200

0800129c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012a0:	4b02      	ldr	r3, [pc, #8]	; (80012ac <HAL_RCC_GetHCLKFreq+0x10>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	0018      	movs	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	20000000 	.word	0x20000000

080012b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	025b      	lsls	r3, r3, #9
 80012c8:	4013      	ands	r3, r2
 80012ca:	d100      	bne.n	80012ce <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80012cc:	e08f      	b.n	80013ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80012ce:	2317      	movs	r3, #23
 80012d0:	18fb      	adds	r3, r7, r3
 80012d2:	2200      	movs	r2, #0
 80012d4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d6:	4b57      	ldr	r3, [pc, #348]	; (8001434 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80012d8:	69da      	ldr	r2, [r3, #28]
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	055b      	lsls	r3, r3, #21
 80012de:	4013      	ands	r3, r2
 80012e0:	d111      	bne.n	8001306 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	4b54      	ldr	r3, [pc, #336]	; (8001434 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80012e4:	69da      	ldr	r2, [r3, #28]
 80012e6:	4b53      	ldr	r3, [pc, #332]	; (8001434 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80012e8:	2180      	movs	r1, #128	; 0x80
 80012ea:	0549      	lsls	r1, r1, #21
 80012ec:	430a      	orrs	r2, r1
 80012ee:	61da      	str	r2, [r3, #28]
 80012f0:	4b50      	ldr	r3, [pc, #320]	; (8001434 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80012f2:	69da      	ldr	r2, [r3, #28]
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	055b      	lsls	r3, r3, #21
 80012f8:	4013      	ands	r3, r2
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012fe:	2317      	movs	r3, #23
 8001300:	18fb      	adds	r3, r7, r3
 8001302:	2201      	movs	r2, #1
 8001304:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001306:	4b4c      	ldr	r3, [pc, #304]	; (8001438 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	4013      	ands	r3, r2
 8001310:	d11a      	bne.n	8001348 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001312:	4b49      	ldr	r3, [pc, #292]	; (8001438 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	4b48      	ldr	r3, [pc, #288]	; (8001438 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001318:	2180      	movs	r1, #128	; 0x80
 800131a:	0049      	lsls	r1, r1, #1
 800131c:	430a      	orrs	r2, r1
 800131e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001320:	f7fe ffba 	bl	8000298 <HAL_GetTick>
 8001324:	0003      	movs	r3, r0
 8001326:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001328:	e008      	b.n	800133c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800132a:	f7fe ffb5 	bl	8000298 <HAL_GetTick>
 800132e:	0002      	movs	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b64      	cmp	r3, #100	; 0x64
 8001336:	d901      	bls.n	800133c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e077      	b.n	800142c <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133c:	4b3e      	ldr	r3, [pc, #248]	; (8001438 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	4013      	ands	r3, r2
 8001346:	d0f0      	beq.n	800132a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001348:	4b3a      	ldr	r3, [pc, #232]	; (8001434 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800134a:	6a1a      	ldr	r2, [r3, #32]
 800134c:	23c0      	movs	r3, #192	; 0xc0
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4013      	ands	r3, r2
 8001352:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d034      	beq.n	80013c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	23c0      	movs	r3, #192	; 0xc0
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4013      	ands	r3, r2
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	429a      	cmp	r2, r3
 8001368:	d02c      	beq.n	80013c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800136a:	4b32      	ldr	r3, [pc, #200]	; (8001434 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	4a33      	ldr	r2, [pc, #204]	; (800143c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001370:	4013      	ands	r3, r2
 8001372:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001374:	4b2f      	ldr	r3, [pc, #188]	; (8001434 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001376:	6a1a      	ldr	r2, [r3, #32]
 8001378:	4b2e      	ldr	r3, [pc, #184]	; (8001434 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800137a:	2180      	movs	r1, #128	; 0x80
 800137c:	0249      	lsls	r1, r1, #9
 800137e:	430a      	orrs	r2, r1
 8001380:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001382:	4b2c      	ldr	r3, [pc, #176]	; (8001434 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001384:	6a1a      	ldr	r2, [r3, #32]
 8001386:	4b2b      	ldr	r3, [pc, #172]	; (8001434 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001388:	492d      	ldr	r1, [pc, #180]	; (8001440 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800138a:	400a      	ands	r2, r1
 800138c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800138e:	4b29      	ldr	r3, [pc, #164]	; (8001434 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2201      	movs	r2, #1
 8001398:	4013      	ands	r3, r2
 800139a:	d013      	beq.n	80013c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139c:	f7fe ff7c 	bl	8000298 <HAL_GetTick>
 80013a0:	0003      	movs	r3, r0
 80013a2:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a4:	e009      	b.n	80013ba <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013a6:	f7fe ff77 	bl	8000298 <HAL_GetTick>
 80013aa:	0002      	movs	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	4a24      	ldr	r2, [pc, #144]	; (8001444 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d901      	bls.n	80013ba <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e038      	b.n	800142c <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ba:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	2202      	movs	r2, #2
 80013c0:	4013      	ands	r3, r2
 80013c2:	d0f0      	beq.n	80013a6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80013c4:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	4a1c      	ldr	r2, [pc, #112]	; (800143c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80013ca:	4013      	ands	r3, r2
 80013cc:	0019      	movs	r1, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	4b18      	ldr	r3, [pc, #96]	; (8001434 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80013d4:	430a      	orrs	r2, r1
 80013d6:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013d8:	2317      	movs	r3, #23
 80013da:	18fb      	adds	r3, r7, r3
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d105      	bne.n	80013ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e2:	4b14      	ldr	r3, [pc, #80]	; (8001434 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80013e4:	69da      	ldr	r2, [r3, #28]
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80013e8:	4917      	ldr	r1, [pc, #92]	; (8001448 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80013ea:	400a      	ands	r2, r1
 80013ec:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2201      	movs	r2, #1
 80013f4:	4013      	ands	r3, r2
 80013f6:	d009      	beq.n	800140c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80013f8:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80013fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fc:	2203      	movs	r2, #3
 80013fe:	4393      	bics	r3, r2
 8001400:	0019      	movs	r1, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001408:	430a      	orrs	r2, r1
 800140a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2220      	movs	r2, #32
 8001412:	4013      	ands	r3, r2
 8001414:	d009      	beq.n	800142a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001416:	4b07      	ldr	r3, [pc, #28]	; (8001434 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	2210      	movs	r2, #16
 800141c:	4393      	bics	r3, r2
 800141e:	0019      	movs	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001426:	430a      	orrs	r2, r1
 8001428:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800142a:	2300      	movs	r3, #0
}
 800142c:	0018      	movs	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	b006      	add	sp, #24
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40021000 	.word	0x40021000
 8001438:	40007000 	.word	0x40007000
 800143c:	fffffcff 	.word	0xfffffcff
 8001440:	fffeffff 	.word	0xfffeffff
 8001444:	00001388 	.word	0x00001388
 8001448:	efffffff 	.word	0xefffffff

0800144c <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e01e      	b.n	800149c <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	223d      	movs	r2, #61	; 0x3d
 8001462:	5c9b      	ldrb	r3, [r3, r2]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d107      	bne.n	800147a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	223c      	movs	r2, #60	; 0x3c
 800146e:	2100      	movs	r1, #0
 8001470:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	0018      	movs	r0, r3
 8001476:	f000 fbc7 	bl	8001c08 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	223d      	movs	r2, #61	; 0x3d
 800147e:	2102      	movs	r1, #2
 8001480:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3304      	adds	r3, #4
 800148a:	0019      	movs	r1, r3
 800148c:	0010      	movs	r0, r2
 800148e:	f000 f959 	bl	8001744 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	223d      	movs	r2, #61	; 0x3d
 8001496:	2101      	movs	r1, #1
 8001498:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	0018      	movs	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	b002      	add	sp, #8
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68da      	ldr	r2, [r3, #12]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2101      	movs	r1, #1
 80014b8:	430a      	orrs	r2, r1
 80014ba:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2101      	movs	r1, #1
 80014c8:	430a      	orrs	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	0018      	movs	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	b002      	add	sp, #8
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	2202      	movs	r2, #2
 80014e6:	4013      	ands	r3, r2
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d124      	bne.n	8001536 <HAL_TIM_IRQHandler+0x60>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	2202      	movs	r2, #2
 80014f4:	4013      	ands	r3, r2
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d11d      	bne.n	8001536 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2203      	movs	r2, #3
 8001500:	4252      	negs	r2, r2
 8001502:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	2203      	movs	r2, #3
 8001512:	4013      	ands	r3, r2
 8001514:	d004      	beq.n	8001520 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	0018      	movs	r0, r3
 800151a:	f000 f8fa 	bl	8001712 <HAL_TIM_IC_CaptureCallback>
 800151e:	e007      	b.n	8001530 <HAL_TIM_IRQHandler+0x5a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	0018      	movs	r0, r3
 8001524:	f000 f8ed 	bl	8001702 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	0018      	movs	r0, r3
 800152c:	f000 f8f9 	bl	8001722 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	2204      	movs	r2, #4
 800153e:	4013      	ands	r3, r2
 8001540:	2b04      	cmp	r3, #4
 8001542:	d125      	bne.n	8001590 <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	2204      	movs	r2, #4
 800154c:	4013      	ands	r3, r2
 800154e:	2b04      	cmp	r3, #4
 8001550:	d11e      	bne.n	8001590 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2205      	movs	r2, #5
 8001558:	4252      	negs	r2, r2
 800155a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2202      	movs	r2, #2
 8001560:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	699a      	ldr	r2, [r3, #24]
 8001568:	23c0      	movs	r3, #192	; 0xc0
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4013      	ands	r3, r2
 800156e:	d004      	beq.n	800157a <HAL_TIM_IRQHandler+0xa4>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	0018      	movs	r0, r3
 8001574:	f000 f8cd 	bl	8001712 <HAL_TIM_IC_CaptureCallback>
 8001578:	e007      	b.n	800158a <HAL_TIM_IRQHandler+0xb4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	0018      	movs	r0, r3
 800157e:	f000 f8c0 	bl	8001702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	0018      	movs	r0, r3
 8001586:	f000 f8cc 	bl	8001722 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	2208      	movs	r2, #8
 8001598:	4013      	ands	r3, r2
 800159a:	2b08      	cmp	r3, #8
 800159c:	d124      	bne.n	80015e8 <HAL_TIM_IRQHandler+0x112>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	2208      	movs	r2, #8
 80015a6:	4013      	ands	r3, r2
 80015a8:	2b08      	cmp	r3, #8
 80015aa:	d11d      	bne.n	80015e8 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2209      	movs	r2, #9
 80015b2:	4252      	negs	r2, r2
 80015b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2204      	movs	r2, #4
 80015ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	2203      	movs	r2, #3
 80015c4:	4013      	ands	r3, r2
 80015c6:	d004      	beq.n	80015d2 <HAL_TIM_IRQHandler+0xfc>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	0018      	movs	r0, r3
 80015cc:	f000 f8a1 	bl	8001712 <HAL_TIM_IC_CaptureCallback>
 80015d0:	e007      	b.n	80015e2 <HAL_TIM_IRQHandler+0x10c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	0018      	movs	r0, r3
 80015d6:	f000 f894 	bl	8001702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	0018      	movs	r0, r3
 80015de:	f000 f8a0 	bl	8001722 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	2210      	movs	r2, #16
 80015f0:	4013      	ands	r3, r2
 80015f2:	2b10      	cmp	r3, #16
 80015f4:	d125      	bne.n	8001642 <HAL_TIM_IRQHandler+0x16c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	2210      	movs	r2, #16
 80015fe:	4013      	ands	r3, r2
 8001600:	2b10      	cmp	r3, #16
 8001602:	d11e      	bne.n	8001642 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2211      	movs	r2, #17
 800160a:	4252      	negs	r2, r2
 800160c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2208      	movs	r2, #8
 8001612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	69da      	ldr	r2, [r3, #28]
 800161a:	23c0      	movs	r3, #192	; 0xc0
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4013      	ands	r3, r2
 8001620:	d004      	beq.n	800162c <HAL_TIM_IRQHandler+0x156>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	0018      	movs	r0, r3
 8001626:	f000 f874 	bl	8001712 <HAL_TIM_IC_CaptureCallback>
 800162a:	e007      	b.n	800163c <HAL_TIM_IRQHandler+0x166>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	0018      	movs	r0, r3
 8001630:	f000 f867 	bl	8001702 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	0018      	movs	r0, r3
 8001638:	f000 f873 	bl	8001722 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	2201      	movs	r2, #1
 800164a:	4013      	ands	r3, r2
 800164c:	2b01      	cmp	r3, #1
 800164e:	d10f      	bne.n	8001670 <HAL_TIM_IRQHandler+0x19a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	2201      	movs	r2, #1
 8001658:	4013      	ands	r3, r2
 800165a:	2b01      	cmp	r3, #1
 800165c:	d108      	bne.n	8001670 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2202      	movs	r2, #2
 8001664:	4252      	negs	r2, r2
 8001666:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	0018      	movs	r0, r3
 800166c:	f000 f9d4 	bl	8001a18 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	2280      	movs	r2, #128	; 0x80
 8001678:	4013      	ands	r3, r2
 800167a:	2b80      	cmp	r3, #128	; 0x80
 800167c:	d10f      	bne.n	800169e <HAL_TIM_IRQHandler+0x1c8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2280      	movs	r2, #128	; 0x80
 8001686:	4013      	ands	r3, r2
 8001688:	2b80      	cmp	r3, #128	; 0x80
 800168a:	d108      	bne.n	800169e <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2281      	movs	r2, #129	; 0x81
 8001692:	4252      	negs	r2, r2
 8001694:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	0018      	movs	r0, r3
 800169a:	f000 f8d3 	bl	8001844 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	2240      	movs	r2, #64	; 0x40
 80016a6:	4013      	ands	r3, r2
 80016a8:	2b40      	cmp	r3, #64	; 0x40
 80016aa:	d10f      	bne.n	80016cc <HAL_TIM_IRQHandler+0x1f6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	2240      	movs	r2, #64	; 0x40
 80016b4:	4013      	ands	r3, r2
 80016b6:	2b40      	cmp	r3, #64	; 0x40
 80016b8:	d108      	bne.n	80016cc <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2241      	movs	r2, #65	; 0x41
 80016c0:	4252      	negs	r2, r2
 80016c2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	0018      	movs	r0, r3
 80016c8:	f000 f833 	bl	8001732 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	2220      	movs	r2, #32
 80016d4:	4013      	ands	r3, r2
 80016d6:	2b20      	cmp	r3, #32
 80016d8:	d10f      	bne.n	80016fa <HAL_TIM_IRQHandler+0x224>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	2220      	movs	r2, #32
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b20      	cmp	r3, #32
 80016e6:	d108      	bne.n	80016fa <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2221      	movs	r2, #33	; 0x21
 80016ee:	4252      	negs	r2, r2
 80016f0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	0018      	movs	r0, r3
 80016f6:	f000 f89d 	bl	8001834 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	46bd      	mov	sp, r7
 80016fe:	b002      	add	sp, #8
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	46bd      	mov	sp, r7
 800170e:	b002      	add	sp, #8
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	46bd      	mov	sp, r7
 800171e:	b002      	add	sp, #8
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	46bd      	mov	sp, r7
 800172e:	b002      	add	sp, #8
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	46bd      	mov	sp, r7
 800173e:	b002      	add	sp, #8
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a2f      	ldr	r2, [pc, #188]	; (8001818 <TIM_Base_SetConfig+0xd4>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d003      	beq.n	8001768 <TIM_Base_SetConfig+0x24>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a2e      	ldr	r2, [pc, #184]	; (800181c <TIM_Base_SetConfig+0xd8>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d108      	bne.n	800177a <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2270      	movs	r2, #112	; 0x70
 800176c:	4393      	bics	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	4313      	orrs	r3, r2
 8001778:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a26      	ldr	r2, [pc, #152]	; (8001818 <TIM_Base_SetConfig+0xd4>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d013      	beq.n	80017aa <TIM_Base_SetConfig+0x66>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a25      	ldr	r2, [pc, #148]	; (800181c <TIM_Base_SetConfig+0xd8>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d00f      	beq.n	80017aa <TIM_Base_SetConfig+0x66>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a24      	ldr	r2, [pc, #144]	; (8001820 <TIM_Base_SetConfig+0xdc>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d00b      	beq.n	80017aa <TIM_Base_SetConfig+0x66>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a23      	ldr	r2, [pc, #140]	; (8001824 <TIM_Base_SetConfig+0xe0>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d007      	beq.n	80017aa <TIM_Base_SetConfig+0x66>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a22      	ldr	r2, [pc, #136]	; (8001828 <TIM_Base_SetConfig+0xe4>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d003      	beq.n	80017aa <TIM_Base_SetConfig+0x66>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a21      	ldr	r2, [pc, #132]	; (800182c <TIM_Base_SetConfig+0xe8>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d108      	bne.n	80017bc <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	4a20      	ldr	r2, [pc, #128]	; (8001830 <TIM_Base_SetConfig+0xec>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2280      	movs	r2, #128	; 0x80
 80017c0:	4393      	bics	r3, r2
 80017c2:	001a      	movs	r2, r3
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a0c      	ldr	r2, [pc, #48]	; (8001818 <TIM_Base_SetConfig+0xd4>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d00b      	beq.n	8001802 <TIM_Base_SetConfig+0xbe>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <TIM_Base_SetConfig+0xe0>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d007      	beq.n	8001802 <TIM_Base_SetConfig+0xbe>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a0c      	ldr	r2, [pc, #48]	; (8001828 <TIM_Base_SetConfig+0xe4>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d003      	beq.n	8001802 <TIM_Base_SetConfig+0xbe>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a0b      	ldr	r2, [pc, #44]	; (800182c <TIM_Base_SetConfig+0xe8>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d103      	bne.n	800180a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	691a      	ldr	r2, [r3, #16]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	615a      	str	r2, [r3, #20]
}
 8001810:	46c0      	nop			; (mov r8, r8)
 8001812:	46bd      	mov	sp, r7
 8001814:	b004      	add	sp, #16
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40012c00 	.word	0x40012c00
 800181c:	40000400 	.word	0x40000400
 8001820:	40002000 	.word	0x40002000
 8001824:	40014000 	.word	0x40014000
 8001828:	40014400 	.word	0x40014400
 800182c:	40014800 	.word	0x40014800
 8001830:	fffffcff 	.word	0xfffffcff

08001834 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800183c:	46c0      	nop			; (mov r8, r8)
 800183e:	46bd      	mov	sp, r7
 8001840:	b002      	add	sp, #8
 8001842:	bd80      	pop	{r7, pc}

08001844 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800184c:	46c0      	nop			; (mov r8, r8)
 800184e:	46bd      	mov	sp, r7
 8001850:	b002      	add	sp, #8
 8001852:	bd80      	pop	{r7, pc}

08001854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001858:	f7fe fce2 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800185c:	f000 f822 	bl	80018a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001860:	f000 f902 	bl	8001a68 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001864:	f000 f876 	bl	8001954 <MX_I2C1_Init>
  MX_TIM6_Init();
 8001868:	f000 f8b4 	bl	80019d4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <main+0x48>)
 800186e:	2201      	movs	r2, #1
 8001870:	2101      	movs	r1, #1
 8001872:	0018      	movs	r0, r3
 8001874:	f7fe ff85 	bl	8000782 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <main+0x48>)
 800187a:	2201      	movs	r2, #1
 800187c:	2102      	movs	r1, #2
 800187e:	0018      	movs	r0, r3
 8001880:	f7fe ff7f 	bl	8000782 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <main+0x48>)
 8001886:	2201      	movs	r2, #1
 8001888:	2104      	movs	r1, #4
 800188a:	0018      	movs	r0, r3
 800188c:	f7fe ff79 	bl	8000782 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim6);
 8001890:	4b03      	ldr	r3, [pc, #12]	; (80018a0 <main+0x4c>)
 8001892:	0018      	movs	r0, r3
 8001894:	f7ff fe06 	bl	80014a4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001898:	e7fe      	b.n	8001898 <main+0x44>
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	48000400 	.word	0x48000400
 80018a0:	20000070 	.word	0x20000070

080018a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a4:	b590      	push	{r4, r7, lr}
 80018a6:	b095      	sub	sp, #84	; 0x54
 80018a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018aa:	2420      	movs	r4, #32
 80018ac:	193b      	adds	r3, r7, r4
 80018ae:	0018      	movs	r0, r3
 80018b0:	2330      	movs	r3, #48	; 0x30
 80018b2:	001a      	movs	r2, r3
 80018b4:	2100      	movs	r1, #0
 80018b6:	f000 fa85 	bl	8001dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018ba:	2310      	movs	r3, #16
 80018bc:	18fb      	adds	r3, r7, r3
 80018be:	0018      	movs	r0, r3
 80018c0:	2310      	movs	r3, #16
 80018c2:	001a      	movs	r2, r3
 80018c4:	2100      	movs	r1, #0
 80018c6:	f000 fa7d 	bl	8001dc4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018ca:	003b      	movs	r3, r7
 80018cc:	0018      	movs	r0, r3
 80018ce:	2310      	movs	r3, #16
 80018d0:	001a      	movs	r2, r3
 80018d2:	2100      	movs	r1, #0
 80018d4:	f000 fa76 	bl	8001dc4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018d8:	0021      	movs	r1, r4
 80018da:	187b      	adds	r3, r7, r1
 80018dc:	2202      	movs	r2, #2
 80018de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018e0:	187b      	adds	r3, r7, r1
 80018e2:	2201      	movs	r2, #1
 80018e4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018e6:	187b      	adds	r3, r7, r1
 80018e8:	2210      	movs	r2, #16
 80018ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018ec:	187b      	adds	r3, r7, r1
 80018ee:	2200      	movs	r2, #0
 80018f0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018f2:	187b      	adds	r3, r7, r1
 80018f4:	0018      	movs	r0, r3
 80018f6:	f7ff f891 	bl	8000a1c <HAL_RCC_OscConfig>
 80018fa:	1e03      	subs	r3, r0, #0
 80018fc:	d001      	beq.n	8001902 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80018fe:	f000 f90b 	bl	8001b18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001902:	2110      	movs	r1, #16
 8001904:	187b      	adds	r3, r7, r1
 8001906:	2207      	movs	r2, #7
 8001908:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800190a:	187b      	adds	r3, r7, r1
 800190c:	2200      	movs	r2, #0
 800190e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001910:	187b      	adds	r3, r7, r1
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001916:	187b      	adds	r3, r7, r1
 8001918:	2200      	movs	r2, #0
 800191a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800191c:	187b      	adds	r3, r7, r1
 800191e:	2100      	movs	r1, #0
 8001920:	0018      	movs	r0, r3
 8001922:	f7ff fb6f 	bl	8001004 <HAL_RCC_ClockConfig>
 8001926:	1e03      	subs	r3, r0, #0
 8001928:	d001      	beq.n	800192e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800192a:	f000 f8f5 	bl	8001b18 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800192e:	003b      	movs	r3, r7
 8001930:	2220      	movs	r2, #32
 8001932:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001934:	003b      	movs	r3, r7
 8001936:	2200      	movs	r2, #0
 8001938:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800193a:	003b      	movs	r3, r7
 800193c:	0018      	movs	r0, r3
 800193e:	f7ff fcb7 	bl	80012b0 <HAL_RCCEx_PeriphCLKConfig>
 8001942:	1e03      	subs	r3, r0, #0
 8001944:	d001      	beq.n	800194a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001946:	f000 f8e7 	bl	8001b18 <Error_Handler>
  }
}
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	46bd      	mov	sp, r7
 800194e:	b015      	add	sp, #84	; 0x54
 8001950:	bd90      	pop	{r4, r7, pc}
	...

08001954 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001958:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <MX_I2C1_Init+0x74>)
 800195a:	4a1c      	ldr	r2, [pc, #112]	; (80019cc <MX_I2C1_Init+0x78>)
 800195c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800195e:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <MX_I2C1_Init+0x74>)
 8001960:	4a1b      	ldr	r2, [pc, #108]	; (80019d0 <MX_I2C1_Init+0x7c>)
 8001962:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001964:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <MX_I2C1_Init+0x74>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800196a:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <MX_I2C1_Init+0x74>)
 800196c:	2201      	movs	r2, #1
 800196e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001970:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <MX_I2C1_Init+0x74>)
 8001972:	2200      	movs	r2, #0
 8001974:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001976:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <MX_I2C1_Init+0x74>)
 8001978:	2200      	movs	r2, #0
 800197a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <MX_I2C1_Init+0x74>)
 800197e:	2200      	movs	r2, #0
 8001980:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <MX_I2C1_Init+0x74>)
 8001984:	2200      	movs	r2, #0
 8001986:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <MX_I2C1_Init+0x74>)
 800198a:	2200      	movs	r2, #0
 800198c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <MX_I2C1_Init+0x74>)
 8001990:	0018      	movs	r0, r3
 8001992:	f7fe ff13 	bl	80007bc <HAL_I2C_Init>
 8001996:	1e03      	subs	r3, r0, #0
 8001998:	d001      	beq.n	800199e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800199a:	f000 f8bd 	bl	8001b18 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <MX_I2C1_Init+0x74>)
 80019a0:	2100      	movs	r1, #0
 80019a2:	0018      	movs	r0, r3
 80019a4:	f7fe ffa0 	bl	80008e8 <HAL_I2CEx_ConfigAnalogFilter>
 80019a8:	1e03      	subs	r3, r0, #0
 80019aa:	d001      	beq.n	80019b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80019ac:	f000 f8b4 	bl	8001b18 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <MX_I2C1_Init+0x74>)
 80019b2:	2100      	movs	r1, #0
 80019b4:	0018      	movs	r0, r3
 80019b6:	f7fe ffe3 	bl	8000980 <HAL_I2CEx_ConfigDigitalFilter>
 80019ba:	1e03      	subs	r3, r0, #0
 80019bc:	d001      	beq.n	80019c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80019be:	f000 f8ab 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000024 	.word	0x20000024
 80019cc:	40005400 	.word	0x40005400
 80019d0:	0000020b 	.word	0x0000020b

080019d4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80019d8:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <MX_TIM6_Init+0x3c>)
 80019da:	4a0e      	ldr	r2, [pc, #56]	; (8001a14 <MX_TIM6_Init+0x40>)
 80019dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000;
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <MX_TIM6_Init+0x3c>)
 80019e0:	22fa      	movs	r2, #250	; 0xfa
 80019e2:	0152      	lsls	r2, r2, #5
 80019e4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e6:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <MX_TIM6_Init+0x3c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <MX_TIM6_Init+0x3c>)
 80019ee:	22fa      	movs	r2, #250	; 0xfa
 80019f0:	0092      	lsls	r2, r2, #2
 80019f2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <MX_TIM6_Init+0x3c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019fa:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <MX_TIM6_Init+0x3c>)
 80019fc:	0018      	movs	r0, r3
 80019fe:	f7ff fd25 	bl	800144c <HAL_TIM_Base_Init>
 8001a02:	1e03      	subs	r3, r0, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM6_Init+0x36>
  {
    Error_Handler();
 8001a06:	f000 f887 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000070 	.word	0x20000070
 8001a14:	40001000 	.word	0x40001000

08001a18 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM6){
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0e      	ldr	r2, [pc, #56]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d115      	bne.n	8001a56 <HAL_TIM_PeriodElapsedCallback+0x3e>
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)!=GPIO_PIN_SET){
 8001a2a:	2390      	movs	r3, #144	; 0x90
 8001a2c:	05db      	lsls	r3, r3, #23
 8001a2e:	2101      	movs	r1, #1
 8001a30:	0018      	movs	r0, r3
 8001a32:	f7fe fe89 	bl	8000748 <HAL_GPIO_ReadPin>
 8001a36:	0003      	movs	r3, r0
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d006      	beq.n	8001a4a <HAL_TIM_PeriodElapsedCallback+0x32>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2102      	movs	r1, #2
 8001a42:	0018      	movs	r0, r3
 8001a44:	f7fe fe9d 	bl	8000782 <HAL_GPIO_WritePin>
		  }else{
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
		  }
	}
}
 8001a48:	e005      	b.n	8001a56 <HAL_TIM_PeriodElapsedCallback+0x3e>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	2102      	movs	r1, #2
 8001a50:	0018      	movs	r0, r3
 8001a52:	f7fe fe96 	bl	8000782 <HAL_GPIO_WritePin>
}
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	b002      	add	sp, #8
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	40001000 	.word	0x40001000
 8001a64:	48000400 	.word	0x48000400

08001a68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b089      	sub	sp, #36	; 0x24
 8001a6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6e:	240c      	movs	r4, #12
 8001a70:	193b      	adds	r3, r7, r4
 8001a72:	0018      	movs	r0, r3
 8001a74:	2314      	movs	r3, #20
 8001a76:	001a      	movs	r2, r3
 8001a78:	2100      	movs	r1, #0
 8001a7a:	f000 f9a3 	bl	8001dc4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	4b24      	ldr	r3, [pc, #144]	; (8001b10 <MX_GPIO_Init+0xa8>)
 8001a80:	695a      	ldr	r2, [r3, #20]
 8001a82:	4b23      	ldr	r3, [pc, #140]	; (8001b10 <MX_GPIO_Init+0xa8>)
 8001a84:	2180      	movs	r1, #128	; 0x80
 8001a86:	0289      	lsls	r1, r1, #10
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	615a      	str	r2, [r3, #20]
 8001a8c:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <MX_GPIO_Init+0xa8>)
 8001a8e:	695a      	ldr	r2, [r3, #20]
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	029b      	lsls	r3, r3, #10
 8001a94:	4013      	ands	r3, r2
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9a:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <MX_GPIO_Init+0xa8>)
 8001a9c:	695a      	ldr	r2, [r3, #20]
 8001a9e:	4b1c      	ldr	r3, [pc, #112]	; (8001b10 <MX_GPIO_Init+0xa8>)
 8001aa0:	2180      	movs	r1, #128	; 0x80
 8001aa2:	02c9      	lsls	r1, r1, #11
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	615a      	str	r2, [r3, #20]
 8001aa8:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <MX_GPIO_Init+0xa8>)
 8001aaa:	695a      	ldr	r2, [r3, #20]
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	02db      	lsls	r3, r3, #11
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8001ab6:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <MX_GPIO_Init+0xac>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2107      	movs	r1, #7
 8001abc:	0018      	movs	r0, r3
 8001abe:	f7fe fe60 	bl	8000782 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ac2:	193b      	adds	r3, r7, r4
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac8:	193b      	adds	r3, r7, r4
 8001aca:	2200      	movs	r2, #0
 8001acc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ace:	193b      	adds	r3, r7, r4
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad4:	193a      	adds	r2, r7, r4
 8001ad6:	2390      	movs	r3, #144	; 0x90
 8001ad8:	05db      	lsls	r3, r3, #23
 8001ada:	0011      	movs	r1, r2
 8001adc:	0018      	movs	r0, r3
 8001ade:	f7fe fcbf 	bl	8000460 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001ae2:	0021      	movs	r1, r4
 8001ae4:	187b      	adds	r3, r7, r1
 8001ae6:	2207      	movs	r2, #7
 8001ae8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aea:	187b      	adds	r3, r7, r1
 8001aec:	2201      	movs	r2, #1
 8001aee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	187b      	adds	r3, r7, r1
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	187b      	adds	r3, r7, r1
 8001af8:	2200      	movs	r2, #0
 8001afa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afc:	187b      	adds	r3, r7, r1
 8001afe:	4a05      	ldr	r2, [pc, #20]	; (8001b14 <MX_GPIO_Init+0xac>)
 8001b00:	0019      	movs	r1, r3
 8001b02:	0010      	movs	r0, r2
 8001b04:	f7fe fcac 	bl	8000460 <HAL_GPIO_Init>

}
 8001b08:	46c0      	nop			; (mov r8, r8)
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	b009      	add	sp, #36	; 0x24
 8001b0e:	bd90      	pop	{r4, r7, pc}
 8001b10:	40021000 	.word	0x40021000
 8001b14:	48000400 	.word	0x48000400

08001b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b1c:	46c0      	nop			; (mov r8, r8)
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_MspInit+0x44>)
 8001b2c:	699a      	ldr	r2, [r3, #24]
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <HAL_MspInit+0x44>)
 8001b30:	2101      	movs	r1, #1
 8001b32:	430a      	orrs	r2, r1
 8001b34:	619a      	str	r2, [r3, #24]
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <HAL_MspInit+0x44>)
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_MspInit+0x44>)
 8001b44:	69da      	ldr	r2, [r3, #28]
 8001b46:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <HAL_MspInit+0x44>)
 8001b48:	2180      	movs	r1, #128	; 0x80
 8001b4a:	0549      	lsls	r1, r1, #21
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	61da      	str	r2, [r3, #28]
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_MspInit+0x44>)
 8001b52:	69da      	ldr	r2, [r3, #28]
 8001b54:	2380      	movs	r3, #128	; 0x80
 8001b56:	055b      	lsls	r3, r3, #21
 8001b58:	4013      	ands	r3, r2
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b002      	add	sp, #8
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	40021000 	.word	0x40021000

08001b6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	; 0x28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	2314      	movs	r3, #20
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	0018      	movs	r0, r3
 8001b7a:	2314      	movs	r3, #20
 8001b7c:	001a      	movs	r2, r3
 8001b7e:	2100      	movs	r1, #0
 8001b80:	f000 f920 	bl	8001dc4 <memset>
  if(hi2c->Instance==I2C1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a1c      	ldr	r2, [pc, #112]	; (8001bfc <HAL_I2C_MspInit+0x90>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d131      	bne.n	8001bf2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8e:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <HAL_I2C_MspInit+0x94>)
 8001b90:	695a      	ldr	r2, [r3, #20]
 8001b92:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <HAL_I2C_MspInit+0x94>)
 8001b94:	2180      	movs	r1, #128	; 0x80
 8001b96:	02c9      	lsls	r1, r1, #11
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	615a      	str	r2, [r3, #20]
 8001b9c:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <HAL_I2C_MspInit+0x94>)
 8001b9e:	695a      	ldr	r2, [r3, #20]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	02db      	lsls	r3, r3, #11
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001baa:	2114      	movs	r1, #20
 8001bac:	187b      	adds	r3, r7, r1
 8001bae:	22c0      	movs	r2, #192	; 0xc0
 8001bb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb2:	187b      	adds	r3, r7, r1
 8001bb4:	2212      	movs	r2, #18
 8001bb6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb8:	187b      	adds	r3, r7, r1
 8001bba:	2201      	movs	r2, #1
 8001bbc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bbe:	187b      	adds	r3, r7, r1
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001bc4:	187b      	adds	r3, r7, r1
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bca:	187b      	adds	r3, r7, r1
 8001bcc:	4a0d      	ldr	r2, [pc, #52]	; (8001c04 <HAL_I2C_MspInit+0x98>)
 8001bce:	0019      	movs	r1, r3
 8001bd0:	0010      	movs	r0, r2
 8001bd2:	f7fe fc45 	bl	8000460 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <HAL_I2C_MspInit+0x94>)
 8001bd8:	69da      	ldr	r2, [r3, #28]
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <HAL_I2C_MspInit+0x94>)
 8001bdc:	2180      	movs	r1, #128	; 0x80
 8001bde:	0389      	lsls	r1, r1, #14
 8001be0:	430a      	orrs	r2, r1
 8001be2:	61da      	str	r2, [r3, #28]
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <HAL_I2C_MspInit+0x94>)
 8001be6:	69da      	ldr	r2, [r3, #28]
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	039b      	lsls	r3, r3, #14
 8001bec:	4013      	ands	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bf2:	46c0      	nop			; (mov r8, r8)
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	b00a      	add	sp, #40	; 0x28
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	40005400 	.word	0x40005400
 8001c00:	40021000 	.word	0x40021000
 8001c04:	48000400 	.word	0x48000400

08001c08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0d      	ldr	r2, [pc, #52]	; (8001c4c <HAL_TIM_Base_MspInit+0x44>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d113      	bne.n	8001c42 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c1a:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <HAL_TIM_Base_MspInit+0x48>)
 8001c1c:	69da      	ldr	r2, [r3, #28]
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <HAL_TIM_Base_MspInit+0x48>)
 8001c20:	2110      	movs	r1, #16
 8001c22:	430a      	orrs	r2, r1
 8001c24:	61da      	str	r2, [r3, #28]
 8001c26:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <HAL_TIM_Base_MspInit+0x48>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	2210      	movs	r2, #16
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2100      	movs	r1, #0
 8001c36:	2011      	movs	r0, #17
 8001c38:	f7fe fbe0 	bl	80003fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001c3c:	2011      	movs	r0, #17
 8001c3e:	f7fe fbf2 	bl	8000426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b004      	add	sp, #16
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	40001000 	.word	0x40001000
 8001c50:	40021000 	.word	0x40021000

08001c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c58:	46c0      	nop			; (mov r8, r8)
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c62:	e7fe      	b.n	8001c62 <HardFault_Handler+0x4>

08001c64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c68:	46c0      	nop			; (mov r8, r8)
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c7c:	f7fe fb00 	bl	8000280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c80:	46c0      	nop			; (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c8c:	4b03      	ldr	r3, [pc, #12]	; (8001c9c <TIM6_IRQHandler+0x14>)
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f7ff fc21 	bl	80014d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001c94:	46c0      	nop			; (mov r8, r8)
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	20000070 	.word	0x20000070

08001ca0 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001ca4:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <SystemInit+0x70>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <SystemInit+0x70>)
 8001caa:	2101      	movs	r1, #1
 8001cac:	430a      	orrs	r2, r1
 8001cae:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001cb0:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <SystemInit+0x70>)
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <SystemInit+0x70>)
 8001cb6:	4917      	ldr	r1, [pc, #92]	; (8001d14 <SystemInit+0x74>)
 8001cb8:	400a      	ands	r2, r1
 8001cba:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001cbc:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <SystemInit+0x70>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <SystemInit+0x70>)
 8001cc2:	4915      	ldr	r1, [pc, #84]	; (8001d18 <SystemInit+0x78>)
 8001cc4:	400a      	ands	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <SystemInit+0x70>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <SystemInit+0x70>)
 8001cce:	4913      	ldr	r1, [pc, #76]	; (8001d1c <SystemInit+0x7c>)
 8001cd0:	400a      	ands	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001cd4:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <SystemInit+0x70>)
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <SystemInit+0x70>)
 8001cda:	4911      	ldr	r1, [pc, #68]	; (8001d20 <SystemInit+0x80>)
 8001cdc:	400a      	ands	r2, r1
 8001cde:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <SystemInit+0x70>)
 8001ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <SystemInit+0x70>)
 8001ce6:	210f      	movs	r1, #15
 8001ce8:	438a      	bics	r2, r1
 8001cea:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <SystemInit+0x70>)
 8001cee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cf0:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <SystemInit+0x70>)
 8001cf2:	490c      	ldr	r1, [pc, #48]	; (8001d24 <SystemInit+0x84>)
 8001cf4:	400a      	ands	r2, r1
 8001cf6:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <SystemInit+0x70>)
 8001cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cfc:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <SystemInit+0x70>)
 8001cfe:	2101      	movs	r1, #1
 8001d00:	438a      	bics	r2, r1
 8001d02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001d04:	4b02      	ldr	r3, [pc, #8]	; (8001d10 <SystemInit+0x70>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]

}
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40021000 	.word	0x40021000
 8001d14:	08ffb80c 	.word	0x08ffb80c
 8001d18:	fef6ffff 	.word	0xfef6ffff
 8001d1c:	fffbffff 	.word	0xfffbffff
 8001d20:	ffc0ffff 	.word	0xffc0ffff
 8001d24:	fffffeec 	.word	0xfffffeec

08001d28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d28:	480d      	ldr	r0, [pc, #52]	; (8001d60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d2a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d2c:	480d      	ldr	r0, [pc, #52]	; (8001d64 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d2e:	490e      	ldr	r1, [pc, #56]	; (8001d68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d30:	4a0e      	ldr	r2, [pc, #56]	; (8001d6c <LoopForever+0xe>)
  movs r3, #0
 8001d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d34:	e002      	b.n	8001d3c <LoopCopyDataInit>

08001d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d3a:	3304      	adds	r3, #4

08001d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d40:	d3f9      	bcc.n	8001d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d42:	4a0b      	ldr	r2, [pc, #44]	; (8001d70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d44:	4c0b      	ldr	r4, [pc, #44]	; (8001d74 <LoopForever+0x16>)
  movs r3, #0
 8001d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d48:	e001      	b.n	8001d4e <LoopFillZerobss>

08001d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d4c:	3204      	adds	r2, #4

08001d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d50:	d3fb      	bcc.n	8001d4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001d52:	f7ff ffa5 	bl	8001ca0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001d56:	f000 f811 	bl	8001d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d5a:	f7ff fd7b 	bl	8001854 <main>

08001d5e <LoopForever>:

LoopForever:
    b LoopForever
 8001d5e:	e7fe      	b.n	8001d5e <LoopForever>
  ldr   r0, =_estack
 8001d60:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d68:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001d6c:	08001e24 	.word	0x08001e24
  ldr r2, =_sbss
 8001d70:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001d74:	200000b0 	.word	0x200000b0

08001d78 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d78:	e7fe      	b.n	8001d78 <ADC1_IRQHandler>
	...

08001d7c <__libc_init_array>:
 8001d7c:	b570      	push	{r4, r5, r6, lr}
 8001d7e:	2600      	movs	r6, #0
 8001d80:	4d0c      	ldr	r5, [pc, #48]	; (8001db4 <__libc_init_array+0x38>)
 8001d82:	4c0d      	ldr	r4, [pc, #52]	; (8001db8 <__libc_init_array+0x3c>)
 8001d84:	1b64      	subs	r4, r4, r5
 8001d86:	10a4      	asrs	r4, r4, #2
 8001d88:	42a6      	cmp	r6, r4
 8001d8a:	d109      	bne.n	8001da0 <__libc_init_array+0x24>
 8001d8c:	2600      	movs	r6, #0
 8001d8e:	f000 f821 	bl	8001dd4 <_init>
 8001d92:	4d0a      	ldr	r5, [pc, #40]	; (8001dbc <__libc_init_array+0x40>)
 8001d94:	4c0a      	ldr	r4, [pc, #40]	; (8001dc0 <__libc_init_array+0x44>)
 8001d96:	1b64      	subs	r4, r4, r5
 8001d98:	10a4      	asrs	r4, r4, #2
 8001d9a:	42a6      	cmp	r6, r4
 8001d9c:	d105      	bne.n	8001daa <__libc_init_array+0x2e>
 8001d9e:	bd70      	pop	{r4, r5, r6, pc}
 8001da0:	00b3      	lsls	r3, r6, #2
 8001da2:	58eb      	ldr	r3, [r5, r3]
 8001da4:	4798      	blx	r3
 8001da6:	3601      	adds	r6, #1
 8001da8:	e7ee      	b.n	8001d88 <__libc_init_array+0xc>
 8001daa:	00b3      	lsls	r3, r6, #2
 8001dac:	58eb      	ldr	r3, [r5, r3]
 8001dae:	4798      	blx	r3
 8001db0:	3601      	adds	r6, #1
 8001db2:	e7f2      	b.n	8001d9a <__libc_init_array+0x1e>
 8001db4:	08001e1c 	.word	0x08001e1c
 8001db8:	08001e1c 	.word	0x08001e1c
 8001dbc:	08001e1c 	.word	0x08001e1c
 8001dc0:	08001e20 	.word	0x08001e20

08001dc4 <memset>:
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	1812      	adds	r2, r2, r0
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d100      	bne.n	8001dce <memset+0xa>
 8001dcc:	4770      	bx	lr
 8001dce:	7019      	strb	r1, [r3, #0]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	e7f9      	b.n	8001dc8 <memset+0x4>

08001dd4 <_init>:
 8001dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dda:	bc08      	pop	{r3}
 8001ddc:	469e      	mov	lr, r3
 8001dde:	4770      	bx	lr

08001de0 <_fini>:
 8001de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001de6:	bc08      	pop	{r3}
 8001de8:	469e      	mov	lr, r3
 8001dea:	4770      	bx	lr
